Measure	DAX Expression	Parent	Child	Tables	Columns
MARIS_DA	 CALCULATE ( [YTD_Maris], FT_MARIS_VW[ITEM] = "EBITDA" )     - CALCULATE ( [YTD_Maris], FT_MARIS_VW[ITEM_KEY] = "4800003" )	YTD_Maris; Total Maris		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]
MARIS_PM	 //previous month VAR PM = [Sel_Mth] - 1 //previous month in case of Year Switch VAR PYM = [Sel_Mth] + 11 //current year VAR CY = [Sel_Year] //previous year VAR PY = [Sel_Year] - 1 // calculation CY VAR CY_calc =     CALCULATE (         [Total Maris],         ALL ( DT_Date[Date], DT_Date[Month_short], DT_Date[Year] ),         KEEPFILTERS (             MONTH ( FT_MARIS_VW[CALENDAR_DATE] ) = PM                 && YEAR ( FT_MARIS_VW[CALENDAR_DATE] ) = CY         )     ) // calculation PY VAR PY_calc =     CALCULATE (         [Total Maris],         ALL ( DT_Date[Date], DT_Date[Month_short], DT_Date[Year] ),         KEEPFILTERS (             MONTH ( FT_MARIS_VW[CALENDAR_DATE] ) = PYM                 && YEAR ( FT_MARIS_VW[CALENDAR_DATE] ) = PY         )     ) RETURN     IF ( [Sel_Mth] = 1, PY_calc, CY_calc )	Sel_Mth; Sel_Year; Total Maris	MARIS_AMvsPM%	DT_Date; FT_MARIS_VW	DT_Date[Month_Number]; DT_Date[Year]; FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; DT_Date[Month_short]; FT_MARIS_VW[CALENDAR_DATE]
MARIS_PYM	 VAR CM = [Sel_Mth] VAR CY = [Sel_Year] - 1 RETURN     CALCULATE (         [Total Maris],         ALL ( DT_Date[Date], DT_Date[Month_short], DT_Date[Year] ),         KEEPFILTERS (             MONTH ( FT_MARIS_VW[CALENDAR_DATE] ) = CM                 && YEAR ( FT_MARIS_VW[CALENDAR_DATE] ) = CY         )     )	Sel_Mth; Sel_Year; Total Maris	MARIS_AMvsPYM%	DT_Date; FT_MARIS_VW	DT_Date[Month_Number]; DT_Date[Year]; FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; DT_Date[Month_short]; FT_MARIS_VW[CALENDAR_DATE]
Monat-WTB	 MONTH ( MAX ( FT_MARIS_VW[CALENDAR_DATE] ) )		MARIS_Capital-Costs_PYTD; MARIS_Capital-Costs_YTD	FT_MARIS_VW	FT_MARIS_VW[CALENDAR_DATE]
PYTDMARIS	 TOTALYTD ( [Total Maris], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	Total Maris	MARIS_ROCEPY; ROCY vs PY; MARIS_Capital-Costs_PYTD; YTD_VS_PYTD%	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]
MARIS_ROCE	 CALCULATE ( [YTD_Maris], FT_MARIS_VW[ITEM_KEY] = "4800003" )     / (         (             CALCULATE ( [YTD_Maris], FT_MARIS_VW[ITEM_KEY] = "K199003" ) / 12         )     )	YTD_Maris; Total Maris	ROCY vs PY	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[ITEM_KEY]
MARIS_ROCEPY	 CALCULATE ( [PYTDMARIS], FT_MARIS_VW[ITEM_KEY] = "4800003" )     / (         (             CALCULATE ( [PYTDMaris], FT_MARIS_VW[ITEM_KEY] = "K199003" ) / 12         )     ) -- EBIT/ROCE-Basis //FT_MARIS_VW[ITEM_KEY]="K480003")/((CALCULATE([PYTDMARIS],FT_MARIS_VW[ITEM_KEY]="K362003")/12)) -- EBIT(REGIONS)/CAPITAL COST BASIS	PYTDMARIS; Total Maris	ROCY vs PY	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[ITEM_KEY]
ROCY vs PY	 [MARIS_ROCE] - [MARIS_ROCEPY]	MARIS_ROCE; YTD_Maris; Total Maris; MARIS_ROCEPY; PYTDMARIS		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[ITEM_KEY]
MARIS_AMvsPM%	 [Total Maris] / [MARIS_PM] - 1	Total Maris; MARIS_PM; Sel_Mth; Sel_Year		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Month_Number]; DT_Date[Year]; DT_Date[Date]; DT_Date[Month_short]; FT_MARIS_VW[CALENDAR_DATE]
MARIS_AMvsPYM%	 [Total Maris] / [MARIS_PYM] - 1	Total Maris; MARIS_PYM; Sel_Mth; Sel_Year		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Month_Number]; DT_Date[Year]; DT_Date[Date]; DT_Date[Month_short]; FT_MARIS_VW[CALENDAR_DATE]
MARIS_Capital-Costs_PYTD	 [PYTDMARIS] / [Monat-WTB]	PYTDMARIS; Total Maris; Monat-WTB		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[CALENDAR_DATE]
MARIS_Capital-Costs_YTD	 [YTD_Maris] / [Monat-WTB]	YTD_Maris; Total Maris; Monat-WTB		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]; FT_MARIS_VW[CALENDAR_DATE]
YTD_Maris	 TOTALYTD ( [Total Maris], DT_Date[Date] )	Total Maris	MARIS_DA; MARIS_ROCE; ROCY vs PY; MARIS_Capital-Costs_YTD; YTD_VS_PYTD%	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]
MARIS_2	 CALCULATE ( SUM ( FT_MARIS_VW[VALUE_EUR] ), ALL ( DT_Date[Month_short] ) ) / 1000			FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Month_short]
YTD_VS_PYTD%	 [YTD_Maris] / [PYTDMARIS] - 1	YTD_Maris; Total Maris; PYTDMARIS		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; DT_Date[Date]
Total BG	 CALCULATE ( SUM ( FT_Budget_EPME[Value] ) )		OP; Δ OP	FT_Budget_EPME	FT_Budget_EPME[Value]
Total FC P&L	 // This measure is used to calculate the FC values for all KPIs except Net Sales 3rd and Volumes 3rd CALCULATE (     SUM ( Historical[Value] ) ) / 1000		FC; FYFC; Δ FYFC FYPY; Δ OP	Historical	Historical[Value]
Total FC 3rd	 // This measure is used to calculate the FC value for NET SALES 3rd, VOLUMES 3rd or PRICE DIVIDE (     CALCULATE ( SUM ( FT_FC_EPME[Value] ) ),     1000 )		FC; FYFC; Δ FYFC FYPY; Δ OP	FT_FC_EPME	FT_FC_EPME[Value]
Total Maris	 CALCULATE ( SUM ( FT_MARIS_VW[VALUE_EUR] ) ) / 1000		MARIS_DA; MARIS_PM; MARIS_PYM; PYTDMARIS; MARIS_ROCE; MARIS_ROCEPY; ROCY vs PY; MARIS_AMvsPM%; MARIS_AMvsPYM%; MARIS_Capital-Costs_PYTD; MARIS_Capital-Costs_YTD; YTD_Maris; YTD_VS_PYTD%; Total Cost Raw Mat.; Act Mth; FYFC; FYPY; PYTD; YTD; Δ FYFC FYPY; Δ OP; Δ PYP; Raw Mat; Raw Mat Cost CY; Raw Mat Cost FC incl Act	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]
Total Net Sales	 CALCULATE ( SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Net_Sales] ) ) / 1000000		Act Mth; FYFC; FYPY; PYTD; YTD; Δ FYFC FYPY; Δ OP; Δ PYP	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]
Total Vol Ocean	 // The total Volume comming from OCEAN SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Standard_Quantity_KG] ) / 1000000		Act Mth; FYFC; FYPY; PYTD; YTD; Δ FYFC FYPY; Δ OP; Δ PYP; Raw Mat; Raw Mat Cost CY; Raw Mat Cost FC incl Act; Raw Mat Price YTD_v2; Raw Mat Price_v2; RawP FC Price Kg FYFC; Vol YTD; ΔPY Volumes	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
Total NS Transfers	 SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES_INCL_TRANSFERS] )		Raw Mat Price YTD_v2; Raw Mat Price_v2; RawP FC Price Kg FYFC	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES_INCL_TRANSFERS]
Total Cost Raw Mat.	 CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3209993" ) )	Total Maris	Raw Mat; Raw Mat Cost CY; Raw Mat Cost FC incl Act	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
Act Mth	 VAR Special_Items =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3400003" ) ) VAR Administration_Cost =     CALCULATE (         [Total Maris],         KEEPFILTERS ( FT_MARIS_VW[ITEM] = "ADMINISTRATION COST" )     ) VAR CM1 =     CALCULATE (         [Total Maris],         KEEPFILTERS ( FT_MARIS_VW[ITEM] = "CONTRIBUTION MARGIN 1" )     ) VAR Ebitbsi =     CALCULATE (         [Total Maris],         KEEPFILTERS ( FT_MARIS_VW[ITEM] = "EBIT BEFORE SI" )     ) VAR EBITDA =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM] = "EBITDA" ) ) VAR DA =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3650003" ) ) VAR EBIT =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "4800003" ) ) VAR sub1 =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "4200003" ) ) VAR sub2 =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "4800033" ) ) VAR FixedCost = sub1 - sub2 VAR sub3 =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3240003" ) ) VAR sub4 =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3250003" ) ) VAR sub5 =     CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3260003" ) ) RETURN     VAR ManufacturingCost = sub3 + sub4 + sub5     VAR NS3rd =         CALCULATE (             [Total Net Sales],             KEEPFILTERS ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID] = "E" )         )     VAR OtherOperatingCost =         CALCULATE (             [Total Maris],             KEEPFILTERS ( FT_MARIS_VW[ITEM] = "OTHER OPERATING COSTS" )         )     VAR sub6 =         CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3321003" ) )     VAR sub7 =         CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3323003" ) )     VAR sub8 =         CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "3324003" ) )     VAR RD = sub6 + sub7 + sub8     VAR SellingCost =         CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM] = "SELLING COST" ) )     VAR ShippingCost =         CALCULATE ( [Total Maris], KEEPFILTERS ( FT_MARIS_VW[ITEM] = "SHIPPING COST" ) )     VAR Vol3rd =         CALCULATE (             [Total Vol Ocean],             ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID] = "E" )         )     VAR sub9 = ManufacturingCost + ShippingCost + SellingCost + RD + Administration_Cost + OtherOperatingCost     VAR sub10 =         CALCULATE (             [Total Maris],             KEEPFILTERS ( FT_MARIS_VW[ITEM] = "Fixed Cost bSI" )         )     VAR OtherCost = ( sub9 - sub10 ) * ( -1 )     RETURN         SWITCH (             MAX ( KPIs[KPIs] ),             "Volumes - 3rd Parties (kt)", Vol3rd,             "Net Sales - 3rd Parties", NS3rd,             "CM1", CM1,             "Fixed Cost", FixedCost,             "Fixed Manufacturing Cost", ManufacturingCost,             "Shipping Cost", ShippingCost,             "Selling Cost", SellingCost,             "R&D Cost", RD,             "Administration Cost", Administration_Cost,             "Other Operating Cost", OtherOperatingCost,             "Other Cost", OtherCost,             "EBIT bSI", Ebitbsi,             "Special Items", Special_Items,             "EBITDA", EBITDA,             "EBIT", EBIT,             "DA", DA         )	Total Maris; Total Net Sales; Total Vol Ocean	FYFC; FYPY; PYTD; YTD; Δ FYFC FYPY; Δ OP; Δ PYP	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]
FC	 VAR CY = [Sel_Year] VAR CM = [Sel_Mth] VAR VolFC =     CALCULATE (         [Total FC 3rd],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         FT_FC_EPME[KPI] = "Sales volume",         YEAR ( FT_FC_EPME[FC Date] ) = CY,         FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC] = "3RD PARTY"     ) VAR NSFC =     CALCULATE (         [Total FC 3rd],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         FT_FC_EPME[KPI] = "Net Sales",         YEAR ( FT_FC_EPME[FC Date] ) = CY,         FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC] = "3RD PARTY"     ) VAR CM1FC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "CM 1",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR ManufCostFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Fixed Manufacturing",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR ShippingCFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total Shipping",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR DA =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Depreciation",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR EBIT =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "EBIT",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR EBITDA = DA + EBIT VAR SI =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Special Items",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR SellingCFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total Selling",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR RDFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total R&D",         MONTH ( Historical[Input Date] ) = CM,         YEAR ( Historical[Input Date] ) = CY     ) VAR AdminCFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total Admin"             && MONTH ( Historical[Input Date] ) = CM             && YEAR ( Historical[Input Date] ) = CY     ) //Other Operating Cost FC VAR OtherOperatingCFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total OOC"             && MONTH ( Historical[Input Date] ) = CM             && YEAR ( Historical[Input Date] ) = CY     ) //Other Cost FC VAR OtherCFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "Total Others"             && MONTH ( Historical[Input Date] ) = CM             && YEAR ( Historical[Input Date] ) = CY     ) //EBIT bSI FC VAR EbitbsiFC =     CALCULATE (         [Total FC P&L],         ALL ( DT_Date[Date], DT_Date[Month_short] ),         Historical[KPI] = "EBITbSI"             && MONTH ( Historical[Input Date] ) = CM             && YEAR ( Historical[Input Date] ) = CY     ) //Fixed Cost FC VAR FixedCostFC = ManufCostFC + ShippingCFC + SellingCFC + RDFC + AdminCFC + OtherOperatingCFC + OtherCFC //Output VAR Output =     SWITCH (         MAX ( KPIs[KPIs] ),         "Volumes - 3rd Parties (kt)", VolFC,         "Net Sales - 3rd Parties", NSFC,         "CM1", CM1FC,         "Fixed Cost", FixedCostFC,         "Fixed Manufacturing Cost", ManufCostFC,         "Shipping Cost", ShippingCFC,         "Selling Cost", SellingCFC,         "R&D Cost", RDFC,         "Administration Cost", AdminCFC,         "Other Operating Cost", OtherOperatingCFC,         "Other Cost", OtherCFC,         "EBIT bSI", EbitbsiFC,         "EBIT", EBIT,         "DA", DA,         "Special Items", SI,         "EBITDA", EBITDA     ) RETURN     Output	Sel_Year; Sel_Mth; Total FC 3rd; Total FC P&L	FYFC; Δ FYFC FYPY; Δ OP	DT_Date; FT_FC_EPME; Historical; KPIs	DT_Date[Year]; DT_Date[Month_Number]; FT_FC_EPME[Value]; DT_Date[Date]; DT_Date[Month_short]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]; FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC]; Historical[Value]; Historical[KPI]; Historical[Input Date]; KPIs[KPIs]
FYFC	[YTD] + [FC]	YTD; Act Mth; Total Maris; Total Net Sales; Total Vol Ocean; FC; Sel_Year; Sel_Mth; Total FC 3rd; Total FC P&L	Δ FYFC FYPY; Δ OP	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date; FT_FC_EPME; Historical	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]; DT_Date[Year]; DT_Date[Month_Number]; FT_FC_EPME[Value]; DT_Date[Month_short]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]; FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC]; Historical[Value]; Historical[KPI]; Historical[Input Date]
FYPY	 CALCULATE ( [Act Mth], PREVIOUSYEAR ( DT_Date[Date] ) )	Act Mth; Total Maris; Total Net Sales; Total Vol Ocean	Δ FYFC FYPY	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]
OP	 VAR CY = [Sel_Year] //Volume BG VAR VolBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Volumes",         FT_Budget_EPME[Calendar Year] = CY,         NOT ( CONTAINSSTRING ( FT_Budget_EPME[Industry], "*exports*" ) ),         NOT ( CONTAINSSTRING ( FT_Budget_EPME[Industry], "*transfers*" ) )     ) //NS BG VAR NSBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Net Sales 3rd party",         FT_Budget_EPME[Calendar Year] = CY     ) //CM1 BG VAR CM1BG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "CM1",         FT_Budget_EPME[Calendar Year] = CY     ) //Manufacturing Cost BG VAR ManufCostBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Fixed Manufacturing",         FT_Budget_EPME[Calendar Year] = CY     ) //Shipping Cost BG VAR Depreciation =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Depreciation",         FT_Budget_EPME[Calendar Year] = CY     ) //Shipping Cost BG VAR ShippingCBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Shipping",         FT_Budget_EPME[Calendar Year] = CY     ) //Selling Cost BG VAR SellingCBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Selling",         FT_Budget_EPME[Calendar Year] = CY     ) //R&D BG VAR RDBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "R&D",         FT_Budget_EPME[Calendar Year] = CY     ) //Administration Cost BG VAR AdminCBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Administration",         FT_Budget_EPME[Calendar Year] = CY     ) //Other Operating Cost BG VAR OtherOperatingCBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Other Operating Cost",         FT_Budget_EPME[Calendar Year] = CY     ) //Other Cost BG VAR OtherCBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Other",         FT_Budget_EPME[Calendar Year] = CY     ) //EBIT bSI BG VAR EbitbsiBG =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "EBITbSI",         FT_Budget_EPME[Calendar Year] = CY     ) //Fixed Cost BG VAR Ebit =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "EBIT",         FT_Budget_EPME[Calendar Year] = CY     ) //Fixed Cost BG VAR EbitDA =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "EBITDA",         FT_Budget_EPME[Calendar Year] = CY     ) VAR SpecialItem =     CALCULATE (         [Total BG],         ALL ( DT_Date ),         FT_Budget_EPME[KPI] = "Special item",         FT_Budget_EPME[Calendar Year] = CY     ) VAR FixedCostYTD = ManufCostBG + ShippingCBG + SellingCBG + RDBG + AdminCBG + OtherOperatingCBG + OtherCBG //Output VAR Output =     SWITCH (         MAX ( KPIs[KPIs] ),         "Volumes - 3rd Parties (kt)", VolBG,         "Net Sales - 3rd Parties", NSBG,         "CM1", CM1BG,         "Fixed Cost", FixedCostYTD,         "Fixed Manufacturing Cost", ManufCostBG,         "Shipping Cost", ShippingCBG,         "Selling Cost", SellingCBG,         "R&D Cost", RDBG,         "Administration Cost", AdminCBG,         "Other Operating Cost", OtherOperatingCBG,         "Other Cost", OtherCBG,         "EBIT bSI", EbitbsiBG,         "Special Items", SpecialItem,         "EBITDA", EbitDA,         "EBIT", Ebit,         "DA", Depreciation     ) RETURN     Output	Sel_Year; Total BG	Δ OP	DT_Date; FT_Budget_EPME; KPIs	DT_Date[Year]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; FT_Budget_EPME[Calendar Year]; FT_Budget_EPME[Industry]; KPIs[KPIs]
PYTD	 TOTALYTD ( [Act Mth], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	Act Mth; Total Maris; Total Net Sales; Total Vol Ocean	Δ PYP	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]
YTD	 TOTALYTD ( [Act Mth], DT_Date[Date] )	Act Mth; Total Maris; Total Net Sales; Total Vol Ocean	FYFC; Δ FYFC FYPY; Δ OP; Δ PYP	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]
Δ FYFC FYPY	 DIVIDE ( [FYFC] - [FYPY], [FYPY] )	FYFC; YTD; Act Mth; Total Maris; Total Net Sales; Total Vol Ocean; FC; Sel_Year; Sel_Mth; Total FC 3rd; Total FC P&L; FYPY		FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date; FT_FC_EPME; Historical	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]; DT_Date[Year]; DT_Date[Month_Number]; FT_FC_EPME[Value]; DT_Date[Month_short]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]; FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC]; Historical[Value]; Historical[KPI]; Historical[Input Date]
Δ OP	 DIVIDE ( [FYFC] - [OP], [OP] )	FYFC; YTD; Act Mth; Total Maris; Total Net Sales; Total Vol Ocean; FC; Sel_Year; Sel_Mth; Total FC 3rd; Total FC P&L; OP; Total BG		FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date; FT_FC_EPME; Historical; FT_Budget_EPME	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]; DT_Date[Year]; DT_Date[Month_Number]; FT_FC_EPME[Value]; DT_Date[Month_short]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]; FT_FC_EPME[138_BUSINESS_TYPE_CM1_ROLLE_FC]; Historical[Value]; Historical[KPI]; Historical[Input Date]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; FT_Budget_EPME[Calendar Year]; FT_Budget_EPME[Industry]
Δ PYP	 DIVIDE ( [YTD], [PYTD], 0 ) - 1	YTD; Act Mth; Total Maris; Total Net Sales; Total Vol Ocean; PYTD		FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; KPIs; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_MARIS_VW[ITEM]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[136_BUSINESS_TYPE_OCEAN_ID]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; KPIs[KPIs]; DT_Date[Date]
Total CM1	 SUM ( FT_COBUS_A4[CM1] ) / 1000000		YTD CM1; PYTD CM1; Total CM1/KG Line; YoY CM1	FT_COBUS_A4	FT_COBUS_A4[CM1]
YTD CM1	 TOTALYTD ( [Total CM1], DT_Date[Date] )	Total CM1	PYTD CM1; YoY CM1	FT_COBUS_A4; DT_Date	FT_COBUS_A4[CM1]; DT_Date[Date]
PYTD CM1	 CALCULATE ( [YTD CM1], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	YTD CM1; Total CM1	YoY CM1	FT_COBUS_A4; DT_Date	FT_COBUS_A4[CM1]; DT_Date[Date]
Total CM1/KG Line	 IF (     SELECTEDVALUE ( 'DT_Date (2)'[Month_Number] )         <= SELECTEDVALUE ( DT_Date[Month_Number] ),     CALCULATE (         [Total CM1]             / ( SUM ( FT_COBUS_A4[STANDARD_QUANTITY_KG] ) / 1000000 ),         FILTER (             ALL ( DT_Date ),             DT_Date[Month_Number] = SELECTEDVALUE ( 'DT_Date (2)'[Month_Number] )                 && DT_Date[Year] = SELECTEDVALUE ( 'DT_Date'[Year] )         )     ),     BLANK () )	Total CM1		DT_Date (2); DT_Date; FT_COBUS_A4	DT_Date (2)[Month_Number]; DT_Date[Month_Number]; FT_COBUS_A4[CM1]; FT_COBUS_A4[STANDARD_QUANTITY_KG]; DT_Date[Year]
YoY CM1	 [YTD CM1] - [PYTD CM1]	YTD CM1; Total CM1; PYTD CM1		FT_COBUS_A4; DT_Date	FT_COBUS_A4[CM1]; DT_Date[Date]
Total AC OIV SBU VIEW	 CALCULATE ( SUM ( FT_SCI_EPME[AC OIV] ), FT_SCI_EPME[TYPE] = "BU_SBU" ) / 1e6		Total AC OIV + FC	FT_SCI_EPME	FT_SCI_EPME[AC OIV]; FT_SCI_EPME[TYPE]
YoY DIV	 VAR PYTD_DIV =     CALCULATE ( [YTD DIV], SAMEPERIODLASTYEAR ( DT_Date[Date] ) ) RETURN     [YTD DIV] - PYTD_DIV	YTD DIV		DT_SBU; FT_SCI_EPME; DT_Date	DT_SBU[SBU_KEY]; FT_SCI_EPME[AC_DIV_YTD]; FT_SCI_EPME[ORG_BU]; DT_Date[Date]
YTD DIV	 IF (     DISTINCTCOUNT ( DT_SBU[SBU_KEY] ) = 1,     SUM ( FT_SCI_EPME[AC_DIV_YTD] ),     CALCULATE (         SUM ( FT_SCI_EPME[AC_DIV_YTD] ),         FT_SCI_EPME[ORG_BU] = "E-PME",         REMOVEFILTERS ( DT_SBU[SBU_KEY] )     ) )		YoY DIV; AoB DIV YTD	DT_SBU; FT_SCI_EPME	DT_SBU[SBU_KEY]; FT_SCI_EPME[AC_DIV_YTD]; FT_SCI_EPME[ORG_BU]
AoB DIV YTD	 VAR DIVTarget =     IF (         DISTINCTCOUNT ( DT_SBU[SBU_KEY] ) = 1,         CALCULATE ( SUM ( FT_Budget_EPME[Value] ), FT_Budget_EPME[KPI] = "DIV" ),         CALCULATE (             SUM ( FT_Budget_EPME[Value] ),             FT_Budget_EPME[KPI] = "DIV",             FT_Budget_EPME[SBU] = "E-PME",             REMOVEFILTERS ( DT_SBU[SBU_KEY] )         )     ) RETURN     [YTD DIV] - DIVTarget	YTD DIV		DT_SBU; FT_Budget_EPME; FT_SCI_EPME	DT_SBU[SBU_KEY]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; FT_Budget_EPME[SBU]; FT_SCI_EPME[AC_DIV_YTD]; FT_SCI_EPME[ORG_BU]
Total AC OIV + FC	[Total AC OIV SBU VIEW] + [Total AC OIV FC]	Total AC OIV SBU VIEW; Total AC OIV FC		FT_SCI_EPME; Reporting month; FT_INVENTORY_AC_OIV; DT_Date	FT_SCI_EPME[AC OIV]; FT_SCI_EPME[TYPE]; FT_SCI_EPME[CALENDAR_DATE]; Reporting month[Reporting Month]; Reporting month[Reporting Date]; FT_INVENTORY_AC_OIV[VALUE]; DT_Date[Month_short]; DT_Date[Month_Number]
Total AC OIV FC	 VAR RepMonth =     MAX ( 'Reporting month'[Reporting Month] ) RETURN     CALCULATE (         SUM ( FT_INVENTORY_AC_OIV[Value] ),         REMOVEFILTERS ( DT_Date[Month_short] ),         KEEPFILTERS ( DT_Date[Month_Number] > RepMonth )     )		Total AC OIV + FC	Reporting month; FT_SCI_EPME; FT_INVENTORY_AC_OIV; DT_Date	FT_SCI_EPME[CALENDAR_DATE]; Reporting month[Reporting Month]; Reporting month[Reporting Date]; FT_INVENTORY_AC_OIV[VALUE]; DT_Date[Month_short]; DT_Date[Month_Number]
DSO Smoothed	 VAR DATE_12Month =     CALCULATE (         DATEADD ( LASTDATE ( FT_CARAT_GROSS_SALES[CALENDAR_DATE] ), -12, MONTH ),         ALL ( FT_CARAT_GROSS_SALES[CALENDAR_DATE] )     ) VAR DATE_Actual =     LASTDATE ( FT_CARAT_GROSS_SALES[CALENDAR_DATE] ) // The DSOSmoothed is calculated by summing the DSO_PIT from the last 11 months + current month and devide by the count of these months (usually 12, but can be less) VAR DSOSmoothed =     CALCULATE (         SUMX ( VALUES ( DT_Date[Month_Number] ), [DSO PIT] ),         DT_Date[Date] > DATE_12Month,         DT_Date[Date] <= DATE_Actual     )         / IF ( ( [CountMonth] > 12 ), ( 12 ), [CountMonth] ) // This step is to keep the Total, while removing unneeded industries in Filter pane  VAR DSOSmoothed_Graph =     CALCULATE (         SUMX ( ALL ( DT_Date[Month_Number] ), [DSO PIT] ),         DT_Date[Date] > DATE_12Month,         DT_Date[Date] <= DATE_Actual     )         / IF ( ( [CountMonth] > 12 ), ( 12 ), [CountMonth] ) RETURN     DSOSmoothed_Graph	DSO PIT; Days_Month1; Total by Month 1; Total Gross Saless CM; Days_Month2; Total by Month 2; Total Gross Saless Month-1; Days_Month3; Total by Month 3; Total Gross Saless Month-2; Days_Month4; Total by Month 4; Total Gross Saless Month-3; Days_Month5; Total by Month 5; Total Gross Saless Month-4; Days_Month6; Total by Month 6; Total Gross Saless Month-5; Days_Month7; Total by Month 7; Total Gross Saless Month-6; Days_Month8; Total by Month 8; Total Gross Saless Month-7; Days_Month9; Total by Month 9; Total Gross Saless Month-8; Days_Month10; Total by Month 10; Total Gross Saless Month-9; Days_Month11; Total by Month 11; Total Gross Saless Month-10; Days_Month12; Total by Month 12; Total Gross Saless Month-11; CountMonth	DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES; DT_Date; Tab KPIs & Joint Org Measures	FT_CARAT_GROSS_SALES[CALENDAR_DATE]; DT_Date[Month_Number]; FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[TOTAL_AR]; FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]; FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[GROSS_SALES_M1]; FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[GROSS_SALES_M2]; FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[GROSS_SALES_M3]; FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[GROSS_SALES_M4]; FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[GROSS_SALES_M5]; FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[GROSS_SALES_M6]; FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[GROSS_SALES_M7]; FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[GROSS_SALES_M8]; FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[GROSS_SALES_M9]; FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[GROSS_SALES_M10]; FT_CARAT_GROSS_SALES[MONTH12]; FT_CARAT_GROSS_SALES[GROSS_SALES_M11]; DT_Date[Date]
DSO PIT	 IF (     ( 'Tab KPIs & Joint Org Measures'[Days_Month1] > 0 )         && ( 'Tab KPIs & Joint Org Measures'[Days_Month1] < 31 ),     IF (         ( 'Tab KPIs & Joint Org Measures'[Days_Month2] > 0 )             && ( 'Tab KPIs & Joint Org Measures'[Days_Month2] < 31 ),         IF (             ( 'Tab KPIs & Joint Org Measures'[Days_Month3] > 0 )                 && ( 'Tab KPIs & Joint Org Measures'[Days_Month3] < 31 ),             IF (                 ( 'Tab KPIs & Joint Org Measures'[Days_Month4] > 0 )                     && ( 'Tab KPIs & Joint Org Measures'[Days_Month4] < 31 ),                 IF (                     ( 'Tab KPIs & Joint Org Measures'[Days_Month5] > 0 )                         && ( 'Tab KPIs & Joint Org Measures'[Days_Month5] < 31 ),                     IF (                         ( 'Tab KPIs & Joint Org Measures'[Days_Month6] > 0 )                             && ( 'Tab KPIs & Joint Org Measures'[Days_Month6] < 31 ),                         IF (                             ( 'Tab KPIs & Joint Org Measures'[Days_Month7] > 0 )                                 && ( 'Tab KPIs & Joint Org Measures'[Days_Month7] < 31 ),                             IF (                                 ( 'Tab KPIs & Joint Org Measures'[Days_Month8] > 0 )                                     && ( 'Tab KPIs & Joint Org Measures'[Days_Month8] < 31 ),                                 IF (                                     ( 'Tab KPIs & Joint Org Measures'[Days_Month9] > 0                                         && ( 'Tab KPIs & Joint Org Measures'[Days_Month9] < 31 ) ),                                     IF (                                         ( 'Tab KPIs & Joint Org Measures'[Days_Month10] > 0 )                                             && ( 'Tab KPIs & Joint Org Measures'[Days_Month10] < 31 ),                                         IF (                                             ( 'Tab KPIs & Joint Org Measures'[Days_Month11] > 0 )                                                 && ( 'Tab KPIs & Joint Org Measures'[Days_Month11] < 31 ),                                             IF (                                                 ( 'Tab KPIs & Joint Org Measures'[Days_Month12] > 0 )                                                     && ( 'Tab KPIs & Joint Org Measures'[Days_Month12] < 31 ),                                                 ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] + 'Tab KPIs & Joint Org Measures'[Days_Month8] + 'Tab KPIs & Joint Org Measures'[Days_Month9] + 'Tab KPIs & Joint Org Measures'[Days_Month10] + 'Tab KPIs & Joint Org Measures'[Days_Month11] + 'Tab KPIs & Joint Org Measures'[Days_Month12] ),                                                 ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] + 'Tab KPIs & Joint Org Measures'[Days_Month8] + 'Tab KPIs & Joint Org Measures'[Days_Month9] + 'Tab KPIs & Joint Org Measures'[Days_Month10] + 'Tab KPIs & Joint Org Measures'[Days_Month11] )                                             ),                                             ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] + 'Tab KPIs & Joint Org Measures'[Days_Month8] + 'Tab KPIs & Joint Org Measures'[Days_Month9] + 'Tab KPIs & Joint Org Measures'[Days_Month10] )                                         ),                                         ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] + 'Tab KPIs & Joint Org Measures'[Days_Month8] + 'Tab KPIs & Joint Org Measures'[Days_Month9] )                                     ),                                     ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] + 'Tab KPIs & Joint Org Measures'[Days_Month8] )                                 ),                                 ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] + 'Tab KPIs & Joint Org Measures'[Days_Month7] )                             ),                             ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] + 'Tab KPIs & Joint Org Measures'[Days_Month6] )                         ),                         ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] + 'Tab KPIs & Joint Org Measures'[Days_Month5] )                     ),                     ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] + 'Tab KPIs & Joint Org Measures'[Days_Month3] + 'Tab KPIs & Joint Org Measures'[Days_Month4] )                 ),                 [Days_Month1] + [Days_Month2] + [Days_Month3]             ),             ( 'Tab KPIs & Joint Org Measures'[Days_Month1] + 'Tab KPIs & Joint Org Measures'[Days_Month2] )         ),         ( 'Tab KPIs & Joint Org Measures'[Days_Month1] )     ),     BLANK () ) 	Days_Month1; Total by Month 1; Total Gross Saless CM; Days_Month2; Total by Month 2; Total Gross Saless Month-1; Days_Month3; Total by Month 3; Total Gross Saless Month-2; Days_Month4; Total by Month 4; Total Gross Saless Month-3; Days_Month5; Total by Month 5; Total Gross Saless Month-4; Days_Month6; Total by Month 6; Total Gross Saless Month-5; Days_Month7; Total by Month 7; Total Gross Saless Month-6; Days_Month8; Total by Month 8; Total Gross Saless Month-7; Days_Month9; Total by Month 9; Total Gross Saless Month-8; Days_Month10; Total by Month 10; Total Gross Saless Month-9; Days_Month11; Total by Month 11; Total Gross Saless Month-10; Days_Month12; Total by Month 12; Total Gross Saless Month-11	DSO Smoothed; DSO Smoothed Δ PY; AoB DSO	Tab KPIs & Joint Org Measures; FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[TOTAL_AR]; FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]; FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[GROSS_SALES_M1]; FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[GROSS_SALES_M2]; FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[GROSS_SALES_M3]; FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[GROSS_SALES_M4]; FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[GROSS_SALES_M5]; FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[GROSS_SALES_M6]; FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[GROSS_SALES_M7]; FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[GROSS_SALES_M8]; FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[GROSS_SALES_M9]; FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[GROSS_SALES_M10]; FT_CARAT_GROSS_SALES[MONTH12]; FT_CARAT_GROSS_SALES[GROSS_SALES_M11]
DSO Smoothed Δ PY	 VAR DSO_PY =     CALCULATE ( [DSO Smoothed], DATEADD ( DT_Date[Date], -1, YEAR ) ) VAR DeltaPY = [DSO Smoothed] - DSO_PY RETURN     DeltaPY	DSO Smoothed; DSO PIT; Days_Month1; Total by Month 1; Total Gross Saless CM; Days_Month2; Total by Month 2; Total Gross Saless Month-1; Days_Month3; Total by Month 3; Total Gross Saless Month-2; Days_Month4; Total by Month 4; Total Gross Saless Month-3; Days_Month5; Total by Month 5; Total Gross Saless Month-4; Days_Month6; Total by Month 6; Total Gross Saless Month-5; Days_Month7; Total by Month 7; Total Gross Saless Month-6; Days_Month8; Total by Month 8; Total Gross Saless Month-7; Days_Month9; Total by Month 9; Total Gross Saless Month-8; Days_Month10; Total by Month 10; Total Gross Saless Month-9; Days_Month11; Total by Month 11; Total Gross Saless Month-10; Days_Month12; Total by Month 12; Total Gross Saless Month-11; CountMonth		FT_CARAT_GROSS_SALES; DT_Date; Tab KPIs & Joint Org Measures	FT_CARAT_GROSS_SALES[CALENDAR_DATE]; DT_Date[Month_Number]; FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[TOTAL_AR]; FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]; FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[GROSS_SALES_M1]; FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[GROSS_SALES_M2]; FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[GROSS_SALES_M3]; FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[GROSS_SALES_M4]; FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[GROSS_SALES_M5]; FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[GROSS_SALES_M6]; FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[GROSS_SALES_M7]; FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[GROSS_SALES_M8]; FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[GROSS_SALES_M9]; FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[GROSS_SALES_M10]; FT_CARAT_GROSS_SALES[MONTH12]; FT_CARAT_GROSS_SALES[GROSS_SALES_M11]; DT_Date[Date]
AoB DSO	 VAR DIVTarget =     IF (         DISTINCTCOUNT ( DT_SBU[SBU_KEY] ) = 1,         CALCULATE ( SUM ( FT_Budget_EPME[Value] ), FT_Budget_EPME[KPI] = "DSO" ),         CALCULATE (             SUM ( FT_Budget_EPME[Value] ),             FT_Budget_EPME[KPI] = "DSO",             FT_Budget_EPME[SBU] = "E-PME",             REMOVEFILTERS ( DT_SBU[SBU_KEY] )         )     ) RETURN     [DSO Smoothed] - DIVTarget	DSO Smoothed; DSO PIT; Days_Month1; Total by Month 1; Total Gross Saless CM; Days_Month2; Total by Month 2; Total Gross Saless Month-1; Days_Month3; Total by Month 3; Total Gross Saless Month-2; Days_Month4; Total by Month 4; Total Gross Saless Month-3; Days_Month5; Total by Month 5; Total Gross Saless Month-4; Days_Month6; Total by Month 6; Total Gross Saless Month-5; Days_Month7; Total by Month 7; Total Gross Saless Month-6; Days_Month8; Total by Month 8; Total Gross Saless Month-7; Days_Month9; Total by Month 9; Total Gross Saless Month-8; Days_Month10; Total by Month 10; Total Gross Saless Month-9; Days_Month11; Total by Month 11; Total Gross Saless Month-10; Days_Month12; Total by Month 12; Total Gross Saless Month-11; CountMonth		DT_SBU; FT_Budget_EPME; FT_CARAT_GROSS_SALES; DT_Date; Tab KPIs & Joint Org Measures	DT_SBU[SBU_KEY]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; FT_Budget_EPME[SBU]; FT_CARAT_GROSS_SALES[CALENDAR_DATE]; DT_Date[Month_Number]; FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[TOTAL_AR]; FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]; FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[GROSS_SALES_M1]; FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[GROSS_SALES_M2]; FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[GROSS_SALES_M3]; FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[GROSS_SALES_M4]; FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[GROSS_SALES_M5]; FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[GROSS_SALES_M6]; FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[GROSS_SALES_M7]; FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[GROSS_SALES_M8]; FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[GROSS_SALES_M9]; FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[GROSS_SALES_M10]; FT_CARAT_GROSS_SALES[MONTH12]; FT_CARAT_GROSS_SALES[GROSS_SALES_M11]; DT_Date[Date]
Intro Page Cur Mon-Year	 "Latest Update: " & [Reporting Date]	Reporting Date		FT_MARIS_VW; DT_Date	FT_MARIS_VW[CALENDAR_DATE]
Reporting Date	 // Take the latest available date in MARIS CALCULATE(MONTH (     LASTDATE ( FT_MARIS_VW[CALENDAR_DATE] ) ) & " - "     & YEAR ( LASTDATE ( FT_MARIS_VW[CALENDAR_DATE] ) ), ALL(DT_Date))		Intro Page Cur Mon-Year	FT_MARIS_VW; DT_Date	FT_MARIS_VW[CALENDAR_DATE]
Sel_Mth	 SELECTEDVALUE ( DT_Date[Month_Number] )		MARIS_PM; MARIS_PYM; MARIS_AMvsPM%; MARIS_AMvsPYM%; FC; FYFC; Δ FYFC FYPY; Δ OP	DT_Date	DT_Date[Month_Number]
Sel_Year	 SELECTEDVALUE ( DT_Date[Year] )		MARIS_PM; MARIS_PYM; MARIS_AMvsPM%; MARIS_AMvsPYM%; FC; FYFC; OP; Δ FYFC FYPY; Δ OP; Raw Mat Cost FC; Raw Mat Cost FC incl Act; RawP FC NS FYFC; RawP FC Price Kg FYFC; RawP FC Vol FYFC; Vol FC; ΔPY Volumes	DT_Date	DT_Date[Year]
Raw Mat	 DIVIDE ( [Total Cost Raw Mat.], [Total Vol Ocean], 0 )	Total Cost Raw Mat.; Total Maris; Total Vol Ocean	Raw Mat Cost CY; Raw Mat Cost FC incl Act	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
Raw Mat Cost CY	 CALCULATE ( [Raw Mat], DATESYTD ( DT_Date[Date] ) )	Raw Mat; Total Cost Raw Mat.; Total Maris; Total Vol Ocean		FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; DT_Date[Date]
Raw Mat Cost FC	 VAR CY = [Sel_Year] VAR FC_RawMat =     CALCULATE (         DIVIDE ( SUM ( 'Historical_Input date'[Value] ), 1000, BLANK () ),         'Historical_Input date'[KPI] = "Raw Material"             && YEAR ( 'Historical_Input date'[Forecast Month] ) = CY     ) VAR FC_Vol =     CALCULATE (         DIVIDE ( SUM ( 'Historical_Input date'[Value] ), 1000, BLANK () ),         'Historical_Input date'[KPI] = "Volumes"             && YEAR ( 'Historical_Input date'[Forecast Month] ) = CY     ) RETURN     DIVIDE ( FC_RawMat, FC_Vol, 0 )	Sel_Year	Raw Mat Cost FC incl Act	DT_Date; Historical_Input date; Historical	DT_Date[Year]; Historical[Input Date]; Historical[Forecast Month]; Historical[Value]; Historical[KPI]; Historical[SBU]; Historical_Input date[Value]; Historical_Input date[KPI]; Historical_Input date[Forecast Month]
Raw Mat Cost FC incl Act	 [Raw Mat Cost FC] + [Raw Mat]	Raw Mat Cost FC; Sel_Year; Raw Mat; Total Cost Raw Mat.; Total Maris; Total Vol Ocean		DT_Date; Historical_Input date; Historical; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Date[Year]; Historical[Input Date]; Historical[Forecast Month]; Historical[Value]; Historical[KPI]; Historical[SBU]; Historical_Input date[Value]; Historical_Input date[KPI]; Historical_Input date[Forecast Month]; FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
Raw Mat Price YTD_v2	 CALCULATE ( [Raw Mat Price_v2], DATESYTD ( DT_Date[Date] ) )	Raw Mat Price_v2; Total NS Transfers; Total Vol Ocean		FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES_INCL_TRANSFERS]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; DT_Date[Date]
Raw Mat Price_v2	 CALCULATE ( DIVIDE ( [Total NS Transfers], [Total Vol Ocean] * 1e6, BLANK () ) )	Total NS Transfers; Total Vol Ocean	Raw Mat Price YTD_v2; RawP FC Price Kg FYFC	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES_INCL_TRANSFERS]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
RawP FC NS FYFC	 VAR CY = [Sel_Year] VAR NS =     CALCULATE (         SUM ( FT_FC_EPME[Value] ),         FT_FC_EPME[KPI] = "NET SALES"             && YEAR ( FT_FC_EPME[FC Date] ) = CY     ) RETURN     NS //+ [Raw Mat NS]	Sel_Year	RawP FC Price Kg FYFC	DT_Date; FT_FC_EPME	DT_Date[Year]; FT_FC_EPME[Value]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]
RawP FC Price Kg FYFC	 DIVIDE ( [RawP FC NS FYFC], [RawP FC Vol FYFC], 0 ) + [Raw Mat Price_v2]	RawP FC NS FYFC; Sel_Year; RawP FC Vol FYFC; Raw Mat Price_v2; Total NS Transfers; Total Vol Ocean		DT_Date; FT_FC_EPME; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Date[Year]; FT_FC_EPME[Value]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[NET_SALES_INCL_TRANSFERS]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
RawP FC Vol FYFC	 VAR CY = [Sel_Year] VAR Vol =     CALCULATE (         SUM ( FT_FC_EPME[Value] ),         FT_FC_EPME[KPI] = "SALES VOLUME"             && YEAR ( FT_FC_EPME[FC Date] ) = CY     ) RETURN     Vol //+ [Raw Mat Vol]	Sel_Year	RawP FC Price Kg FYFC	DT_Date; FT_FC_EPME	DT_Date[Year]; FT_FC_EPME[Value]; FT_FC_EPME[KPI]; FT_FC_EPME[FC Date]
Vol FC	 VAR CY = [Sel_Year] RETURN     CALCULATE (         DIVIDE ( SUM ( 'Historical_Input date'[Value] ), 1000, BLANK () ),         'Historical_Input date'[KPI] = "Volumes"             && YEAR ( 'Historical_Input date'[Forecast Month] ) = CY     )	Sel_Year		DT_Date; Historical_Input date; Historical	DT_Date[Year]; Historical[Input Date]; Historical[Forecast Month]; Historical[Value]; Historical[KPI]; Historical[SBU]; Historical_Input date[Value]; Historical_Input date[KPI]; Historical_Input date[Forecast Month]
Vol PY	 VAR PY =     MAX ( DT_Date[Year] ) - 1 VAR VOL_PY =     CALCULATE (         SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Standard_Quantity_KG] ),         ALL ( DT_Date[Month_short], DT_Date[Year] ),         DT_Date[Year] = PY     ) / 1000000 RETURN     VOL_PY			DT_Date; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Date[Year]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; DT_Date[Month_short]
Vol YTD	 CALCULATE ( [Total Vol Ocean], DATESYTD ( DT_Date[Date] ) )	Total Vol Ocean	ΔPY Volumes	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; DT_Date[Date]
ΔPY Volumes	 VAR PY = [Sel_Year] - 1 VAR VolPY =     CALCULATE (         [Total Vol Ocean],         ALL ( DT_Date ),         YEAR ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Calendar_Year_Month] ) = PY     ) RETURN     [Vol YTD] - VolPY	Sel_Year; Total Vol Ocean; Vol YTD		DT_Date; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Date[Year]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[CALENDAR_YEAR_MONTH]; DT_Date[Date]
Average QTD_	 VAR qua =     QUARTER ( FIRSTDATE ( DT_Date[Date] ) ) RETURN     CALCULATE (         AVERAGE ( 'FT_Transfer_Prices'[Value] ),         'FT_Transfer_Prices'[Quarter] = qua     ) 		Average Δ  Price_	DT_Date; FT_Transfer_Prices	DT_Date[Date]; FT_Transfer_Prices[Value]; FT_Transfer_Prices[Quarter]; FT_Transfer_Prices[Forecast Date]
Average Transfer Price NEXTQTD_	 CALCULATE (     AVERAGE ( 'FT_Transfer_Prices'[Value] ),     USERELATIONSHIP ( DT_Date[Date], FT_Transfer_Prices[Forecast Date] ),     NEXTQUARTER ( DT_Date[Date] ) )		Average Δ  Price_	FT_Transfer_Prices; DT_Date	FT_Transfer_Prices[Value]; DT_Date[Date]; FT_Transfer_Prices[Forecast Date]
Average Δ  Price_	 DIVIDE ( [Average Transfer Price NEXTQTD_], [Average QTD_] ) - 1	Average Transfer Price NEXTQTD_; Average QTD_		FT_Transfer_Prices; DT_Date	FT_Transfer_Prices[Value]; DT_Date[Date]; FT_Transfer_Prices[Forecast Date]; FT_Transfer_Prices[Quarter]
FC Transfer Price_	 // VAR seldate = //     DATE ( SELECTEDVALUE ( DT_Date[Year] ), SELECTEDVALUE ( DT_Date[Month_Number] ), 1 ) // VAR selmonth = //     FILTER ( //         'FT_Transfer_Prices', //         MONTH ( 'FT_Transfer_Prices'[Forecast Date] ) >= MONTH ( seldate ) //     ) // VAR selyear = //     FILTER ( //         'FT_Transfer_Prices', //         YEAR ( 'FT_Transfer_Prices'[Forecast Date] ) = YEAR ( seldate ) //     ) // RETURN //     CALCULATE ( SUM ( 'FT_Transfer_Prices'[Value] ), selmonth, selyear ) VAR selMonth = SELECTEDVALUE('DT_Date'[Month_Number]) VAR selYear = SELECTEDVALUE('DT_Date'[Year]) VAR lastMonth = LASTDATE('DT_Date'[Date]) RETURN CALCULATE ( SUM ( 'FT_Transfer_Prices'[Value] ), FT_Transfer_Prices[Forecast Date] > lastMonth) 			DT_Date; FT_Transfer_Prices	DT_Date[Month_Number]; DT_Date[Year]; DT_Date[Date]; FT_Transfer_Prices[Value]; FT_Transfer_Prices[Forecast Date]
Next Quarter	 IF ( [Selected Quarter] = 4, 1, [Selected Quarter] + 1 )	Selected Quarter		DT_Date	DT_Date[Year]; DT_Date[Month_Number]
Selected Quarter	 QUARTER (     DATE ( SELECTEDVALUE ( DT_Date[Year] ), SELECTEDVALUE ( DT_Date[Month_Number] ), 1 ) )		Next Quarter	DT_Date	DT_Date[Year]; DT_Date[Month_Number]
0_TEST	CALCULATE ( [Ebit_0_FC], KEEPFILTERS ( Historical[KPI] = "Volumes" ) )	Ebit_0_FC	2_TEST	Historical	Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
1_TEST	SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Standard_Quantity_KG] ) / 1000000 			FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]
2_TEST	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     CALCULATE (         CALCULATE (             [0_TEST],             ALL ( DT_Date[Month_Name] ),             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" )         ),         DT_Date[Month_Number] > MonthSel     ) 	0_TEST; Ebit_0_FC		DT_Date; Historical; DT_Matrix_Act_Table_ND	DT_Date[Month_Number]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_Date[Month_Name]; DT_Matrix_Act_Table_ND[KPI]
TEST	[FYFC_CM_0_(for PM comp.)] - [FYFC_0_PM] 	FYFC_CM_0_(for PM comp.); Volume_effect_FYFC_1_CM(for PM comp.); Volume_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM; Volume_FYFC_0_PM; Price_effect_FYFC_1_CM(for PM comp.); Price_FYFC_0_CM; FixedCost_effect_FYFC_0_CM; CM1_effect_FYFC_0_CM; VarCost_effect_FYFC_0_CM(for PM comp.); CM1/kg_FYFC_0_PM_VarCostCalc; EBITbSI_effect_FYFC_0_CM; FYFC_0_PM; Volume_effect_FYFC_1_PM; Price_effect_FYFC_1_PM; Price_FYFC_0_PM; FixedCost_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; EBITbSI_effect_1_FYFC (Act till PM); Matrix_1_FC_Previous; EBITbSI_0_FC_Previous		DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_Date[Month_short]; DT_Date[Year]; Historical[check]; DT_Date[Date]; Historical[Input_Date_for_PM]
Total by Month 1	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month1] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month1; Days_Month2	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH1]
Total by Month 2	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month2] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month2; Days_Month3	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH2]
Total by Month 3	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month3] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month3; Days_Month4	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH3]
Total by Month 4	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month4] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month4; Days_Month5	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH4]
Total by Month 5	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month5] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month5; Days_Month6	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH5]
Total by Month 6	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month6] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month6; Days_Month7	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH6]
Total by Month 7	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month7] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month7; Days_Month8	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH7]
Total by Month 8	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month8] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month8; Days_Month9	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH8]
Total by Month 9	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month9] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month9; Days_Month10	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH9]
Total by Month 10	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month10] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month10; Days_Month11	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH10]
Total by Month 11	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month11] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month11; Days_Month12	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH11]
Total by Month 12	 SUMX ( FT_CARAT_GROSS_SALES, FT_CARAT_GROSS_SALES[Month12] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month12	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH12]
Total Gross Saless CM	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month1	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]
Total Gross Saless Month-1	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M1] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month2	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M1]
Total Gross Saless Month-2	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M2] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month3	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M2]
Total Gross Saless Month-3	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M3] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month4	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M3]
Total Gross Saless Month-4	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M4] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month5	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M4]
Total Gross Saless Month-5	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M5] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month6	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M5]
Total Gross Saless Month-6	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M6] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month7	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M6]
Total Gross Saless Month-7	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M7] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month8	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M7]
Total Gross Saless Month-8	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M8] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month9	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M8]
Total Gross Saless Month-9	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M9] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month10	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M9]
Total Gross Saless Month-10	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M10] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month11	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M10]
Total Gross Saless Month-11	 SUM ( FT_CARAT_GROSS_SALES[GROSS_SALES_M11] )		DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO; Days_Month12	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[GROSS_SALES_M11]
Days_Month1	 IF (     ( [Total by Month 1] > 0 ),     30,     (         DIVIDE ( SUM ( FT_CARAT_GROSS_SALES[TOTAL_AR] ), [Total Gross Saless CM] ) * 30     ) )	Total by Month 1; Total Gross Saless CM	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[TOTAL_AR]; FT_CARAT_GROSS_SALES[GROSS_SALES_CURR_MONTH]
Days_Month2	 IF (     ( [Total by Month 2] > 0 ),     30,     ( DIVIDE ( [Total by Month 1], [Total Gross Saless Month-1] ) * 30 ) )	Total by Month 2; Total by Month 1; Total Gross Saless Month-1	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[MONTH1]; FT_CARAT_GROSS_SALES[GROSS_SALES_M1]
Days_Month3	 IF (     ( [Total by Month 3] > 0 ),     30,     ( DIVIDE ( [Total by Month 2], [Total Gross Saless Month-2] ) * 30 ) )	Total by Month 3; Total by Month 2; Total Gross Saless Month-2	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[MONTH2]; FT_CARAT_GROSS_SALES[GROSS_SALES_M2]
Days_Month4	 IF (     ( [Total by Month 4] > 0 ),     30,     ( DIVIDE ( [Total by Month 3], [Total Gross Saless Month-3] ) * 30 ) )	Total by Month 4; Total by Month 3; Total Gross Saless Month-3	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[MONTH3]; FT_CARAT_GROSS_SALES[GROSS_SALES_M3]
Days_Month5	 IF (     ( [Total by Month 5] > 0 ),     30,     ( DIVIDE ( [Total by Month 4], [Total Gross Saless Month-4] ) * 30 ) )	Total by Month 5; Total by Month 4; Total Gross Saless Month-4	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[MONTH4]; FT_CARAT_GROSS_SALES[GROSS_SALES_M4]
Days_Month6	 IF (     ( [Total by Month 6] > 0 ),     30,     ( DIVIDE ( [Total by Month 5], [Total Gross Saless Month-5] ) * 30 ) )	Total by Month 6; Total by Month 5; Total Gross Saless Month-5	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[MONTH5]; FT_CARAT_GROSS_SALES[GROSS_SALES_M5]
Days_Month7	 IF (     ( [Total by Month 7] > 0 ),     30,     ( DIVIDE ( [Total by Month 6], [Total Gross Saless Month-6] ) * 30 ) )	Total by Month 7; Total by Month 6; Total Gross Saless Month-6	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[MONTH6]; FT_CARAT_GROSS_SALES[GROSS_SALES_M6]
Days_Month8	 IF (     ( [Total by Month 8] > 0 ),     30,     ( DIVIDE ( [Total by Month 7], [Total Gross Saless Month-7] ) * 30 ) )	Total by Month 8; Total by Month 7; Total Gross Saless Month-7	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[MONTH7]; FT_CARAT_GROSS_SALES[GROSS_SALES_M7]
Days_Month9	 IF (     ( [Total by Month 9] > 0 ),     30,     ( DIVIDE ( [Total by Month 8], [Total Gross Saless Month-8] ) * 30 ) )	Total by Month 9; Total by Month 8; Total Gross Saless Month-8	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[MONTH8]; FT_CARAT_GROSS_SALES[GROSS_SALES_M8]
Days_Month10	 IF (     ( [Total by Month 10] > 0 ),     30,     ( DIVIDE ( [Total by Month 9], [Total Gross Saless Month-9] ) * 30 ) )	Total by Month 10; Total by Month 9; Total Gross Saless Month-9	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[MONTH9]; FT_CARAT_GROSS_SALES[GROSS_SALES_M9]
Days_Month11	 IF (     ( [Total by Month 11] > 0 ),     30,     ( DIVIDE ( [Total by Month 10], [Total Gross Saless Month-10] ) * 30 ) )	Total by Month 11; Total by Month 10; Total Gross Saless Month-10	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[MONTH10]; FT_CARAT_GROSS_SALES[GROSS_SALES_M10]
Days_Month12	 IF (     ( [Total by Month 12] > 0 ),     30,     ( DIVIDE ( [Total by Month 11], [Total Gross Saless Month-11] ) * 30 ) )	Total by Month 12; Total by Month 11; Total Gross Saless Month-11	DSO Smoothed; DSO PIT; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[MONTH12]; FT_CARAT_GROSS_SALES[MONTH11]; FT_CARAT_GROSS_SALES[GROSS_SALES_M11]
CountMonth	 CALCULATE (     DISTINCTCOUNT ( FT_CARAT_GROSS_SALES[CALENDAR_DATE] ),     FILTER (         ALL ( FT_CARAT_GROSS_SALES ),         FT_CARAT_GROSS_SALES[CALENDAR_DATE]             <= MAX ( FT_CARAT_GROSS_SALES[CALENDAR_DATE] )     ) )		DSO Smoothed; DSO Smoothed Δ PY; AoB DSO	FT_CARAT_GROSS_SALES	FT_CARAT_GROSS_SALES[CALENDAR_DATE]
MARIS EBITDA	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "4800023" ) / 1000		NCC EBITDA YTD	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
MARIS A/R Adj.	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "K170053" ) / 1000		NCC A/R YTD	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
MARIS CapEx	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "K963503" ) / 1000		NCC CAPEX YTD	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
MARIS Inventories Adj.	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "K160053" ) / 1000		NCC Inventories Adj. YTD	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
MARIS Net Cash Contribution	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "K963003" ) / 1000		Net Cash Contribution PYD; Net Cash Contribution YTD; NCC Δ from PY; NCC Target Delta	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
MARIS Others	 CALCULATE (     SUM ( FT_MARIS_VW[VALUE_EUR] ),     FT_MARIS_VW,     FT_MARIS_VW[ITEM_KEY] = "K963203" ) / 1000		NCC Others YTD	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]
NCC EBITDA YTD	 CALCULATE ( [MARIS EBITDA], DATESYTD ( DT_Date[Date] ) )	MARIS EBITDA		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC A/R YTD	 CALCULATE ( [MARIS A/R Adj.], DATESYTD ( DT_Date[Date] ) )	MARIS A/R Adj.		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC Inventories Adj. YTD	 CALCULATE ( [MARIS Inventories Adj.], DATESYTD ( DT_Date[Date] ) )	MARIS Inventories Adj.		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC CAPEX YTD	 CALCULATE ( [MARIS CapEx], DATESYTD ( DT_Date[Date] ) )	MARIS CapEx		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC Others YTD	 CALCULATE ( [MARIS Others], DATESYTD ( DT_Date[Date] ) )	MARIS Others		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Net Cash Contribution PYD	 CALCULATE ( [Net Cash Contribution YTD], DATEADD ( DT_Date[Date], -1, YEAR ) )	Net Cash Contribution YTD; MARIS Net Cash Contribution	NCC Δ from PY	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Net Cash Contribution YTD	 CALCULATE ( [MARIS Net Cash Contribution], DATESYTD ( DT_Date[Date] ) )	MARIS Net Cash Contribution	Net Cash Contribution PYD; NCC Δ from PY; NCC Target Delta	FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC Δ from PY	[Net Cash Contribution YTD] - [Net Cash Contribution PYD]	Net Cash Contribution YTD; MARIS Net Cash Contribution; Net Cash Contribution PYD		FT_MARIS_VW; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
NCC Target FY	 VAR NCCTarget =     TOTALYTD (         SUM ( FT_Budget_EPME[Value] ),         DT_Date[Date],         FT_Budget_EPME[KPI] = "NCC"     ) RETURN     NCCTarget		NCC Target Delta	FT_Budget_EPME; DT_Date	FT_Budget_EPME[Value]; DT_Date[Date]; FT_Budget_EPME[KPI]
NCC Target Delta	[Net Cash Contribution YTD] - [NCC Target FY]	Net Cash Contribution YTD; MARIS Net Cash Contribution; NCC Target FY		FT_MARIS_VW; DT_Date; FT_Budget_EPME	FT_MARIS_VW[VALUE_EUR]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Overdue Quota	 VAR OverdueQuota_graph =     CALCULATE (         DIVIDE (             SUM ( FT_CARAT_Overdue[OVERDUE] ),             SUM ( FT_CARAT_Overdue[TOTAL_AR] ),             BLANK ()         ),         FILTER (             ALL ( DT_Date[Date], DT_Date[M_YYYY], DT_Date[Year] ),             DT_Date[Date]                 >= ( MAX ( DT_Date[Date] ) - 397 )                 && DT_Date[Year] <= YEAR ( MAX ( DT_Date[Date] ) )         )     ) RETURN     OverdueQuota_graph			FT_CARAT_Overdue; DT_Date	FT_CARAT_Overdue[OVERDUE]; FT_CARAT_Overdue[TOTAL_AR]; DT_Date[Date]; DT_Date[M_YYYY]; DT_Date[Month_Number]; DT_Date[Year]
Overdues	 //This step is to show the Overdue for the last two years according to the slicer. The month will run from the last 2 years to the end of the year VAR TotalOverdue_graph =     CALCULATE (         SUM ( FT_CARAT_Overdue[OVERDUE] ),         FILTER (             ALL ( DT_Date[Date], DT_Date[M_YYYY], DT_Date[Year] ),             DT_Date[Date]                 >= ( MAX ( DT_Date[Date] ) - 397 )                 && DT_Date[Year] <= YEAR ( MAX ( DT_Date[Date] ) )         )     ) VAR Overdue_graph =     DIVIDE ( TotalOverdue_graph, 1000000, BLANK () ) RETURN     Overdue_graph			FT_CARAT_Overdue; DT_Date	FT_CARAT_Overdue[OVERDUE]; DT_Date[Date]; DT_Date[M_YYYY]; DT_Date[Month_Number]; DT_Date[Year]
0_PA6_CM1_CM	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // DIVIDE(     //     CALCULATE(SUM(FT_COBUS_A_Joint[CM1_PA6]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid B",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="J1"     //     ),     //     CALCULATE(SUM(FT_COBUS_A_Joint[Standard_Quantity_PA6]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid B",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="J1"     //     ),     //     BLANK()     // )     DIVIDE (         CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1_PA6] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid B",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J1"         ),         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity_PA6] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid B",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J1"         ),         BLANK ()     )		1_PA6_CM1_CM	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA6]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA6]
0_PA6_CM1_CM_2	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // DIVIDE(     //     CALCULATE(SUM(FT_COBUS_A_Joint[CM1_PA6]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid B",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6"     //     ),     //     CALCULATE(SUM(FT_COBUS_A_Joint[Standard_Quantity_PA6]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid B",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6"     //     ),     //     BLANK()     // )     DIVIDE (         CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1_PA6] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid B",             FT_COBUS_A_Joint[Consolidation_View_Key] = "A6"         ),         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity_PA6] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid B",             FT_COBUS_A_Joint[Consolidation_View_Key] = "A6"         ),         BLANK ()     )		1_PA6_CM1_CM; 1_PA6_CM1_PM	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA6]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA6]
1_PA6_CM1_CM	 ( [0_PA6_CM1_CM] - [0_PA6_CM1_CM_2] ) * 1000	0_PA6_CM1_CM; 0_PA6_CM1_CM_2		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA6]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA6]
1_PA6_CM1_PM	 [0_PA6_CM1_CM_2] * 1000	0_PA6_CM1_CM_2		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA6]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA6]
0_PA66_CM1_CM	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // DIVIDE(     //     CALCULATE(SUM(FT_COBUS_A_Joint[CM1_PA66]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid A",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="J1"     //     ),     //     CALCULATE(SUM(FT_COBUS_A_Joint[Standard_Quantity_PA66]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid A",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="J1"     //     ),     //     BLANK()     // )     DIVIDE (         CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1_PA66] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid A",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J1"         ),         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity_PA66] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid A",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J1"         ),         BLANK ()     )		1_PA66_CM1_CM	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA66]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA66]
0_PA66_CM1_CM_2	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // DIVIDE(     //     CALCULATE(SUM(FT_COBUS_A_Joint[CM1_PA66]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid A",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6"     //     ),     //     CALCULATE(SUM(FT_COBUS_A_Joint[Standard_Quantity_PA66]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[SBU_Key]="PMP",     //     FT_COBUS_A_Joint[Poly Cat]="Ultramid A",     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6"     //     ),     //     BLANK()     // )     DIVIDE (         CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1_PA66] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid A",             FT_COBUS_A_Joint[Consolidation_View_Key] = "A6"         ),         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity_PA66] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMP",             FT_COBUS_A_Joint[Poly Cat] = "Ultramid A",             FT_COBUS_A_Joint[Consolidation_View_Key] = "A6"         ),         BLANK ()     )		1_PA66_CM1_CM; 1_PA66_CM1_PM	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA66]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA66]
1_PA66_CM1_CM	 ( [0_PA66_CM1_CM] - [0_PA66_CM1_CM_2] ) * 1000	0_PA66_CM1_CM; 0_PA66_CM1_CM_2		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA66]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA66]
1_PA66_CM1_PM	 [0_PA66_CM1_CM_2] * 1000	0_PA66_CM1_CM_2		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1_PA66]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Poly Cat]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[Standard_Quantity_PA66]
CM NUMERATOR	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // CALCULATE(SUM(FT_COBUS_A_Joint[CM1]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[Consolidation_View_Key]="J0",     //     FT_COBUS_A_Joint[SBU_Key]="PMU")     // -Calculate(SUM(FT_COBUS_A_Joint[CM1]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6",     //     FT_COBUS_A_Joint[SBU_Key] ="PMU")       CALCULATE (         SUM ( FT_COBUS_A_Joint[CM1] ),         FILTER (             ALL ( DT_Date ),             DT_Date[Month_Number] <= SelectedMonth                 && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )         ),         FT_COBUS_A_Joint[Consolidation_View_Key] = "J0",         FT_COBUS_A_Joint[SBU_Key] = "PMU"     )         - CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[Consolidation_View_Key] = "A6",             FT_COBUS_A_Joint[SBU_Key] = "PMU"         )		CM Total Calculation	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[SBU_Key]
PMO NUMERATOR	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // CALCULATE(SUM(FT_COBUS_A_Joint[CM1]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A6",     //     FT_COBUS_A_Joint[SBU_Key]="PMU")     // -Calculate(SUM(FT_COBUS_A_Joint[CM1]),     //     FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //     FT_COBUS_A_Joint[Consolidation_View_Key]="A4",     //     FT_COBUS_A_Joint[SBU_Key] ="PMU")     CALCULATE (         SUM ( FT_COBUS_A_Joint[CM1] ),         FILTER (             ALL ( DT_Date ),             DT_Date[Month_Number] <= SelectedMonth                 && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )         ),         FT_COBUS_A_Joint[Consolidation_View_Key] = "A6",         FT_COBUS_A_Joint[SBU_Key] = "PMU"     )         - CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[Consolidation_View_Key] = "A4",             FT_COBUS_A_Joint[SBU_Key] = "PMU"         )		PMO Total Calculation	DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[SBU_Key]
CM Total Calculation	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // Divide(     //     [cm NUMERATOR],     //     CALCULATE(     //         sum(FT_COBUS_A_Joint[Standard_Quantity]),     //         FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //         FT_COBUS_A_Joint[SBU_Key] = "PMU",     //         FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"     //         ),BLANK())*1000     DIVIDE (         [cm NUMERATOR],         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMU",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"         ),         BLANK ()     ) * 1000	CM NUMERATOR		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Standard_Quantity]
PMO Total Calculation	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // Divide(     //     [PMO NUMERATOR],     //     CALCULATE(     //         sum(FT_COBUS_A_Joint[Standard_Quantity]),     //             FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //             FT_COBUS_A_Joint[SBU_Key] = "PMU",     //             FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"     //           ),     //     BLANK())*1000     DIVIDE (         [PMO NUMERATOR],         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMU",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"         ),         BLANK ()     ) * 1000	PMO NUMERATOR		DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Standard_Quantity]
PMU Total Calculation	 VAR SelectedMonth =     SELECTEDVALUE ( DT_Date[Month_Number] ) RETURN     // Divide(     //     Calculate(SUM(FT_COBUS_A_Joint[CM1]),     //         FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //         FT_COBUS_A_Joint[Consolidation_View_Key]="A4",     //         FT_COBUS_A_Joint[SBU_Key] = "PMU"),     //     CALCULATE(sum(FT_COBUS_A_Joint[Standard_Quantity]),     //         FILTER(ALL(DT_Date[Date], DT_Date[Month_short], DT_Date[Year]), DT_Date[Date] <= MAX(DT_Date[Date])),     //         FT_COBUS_A_Joint[SBU_Key] = "PMU",     //         FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"     // ),BLANK())*1000     DIVIDE (         CALCULATE (             SUM ( FT_COBUS_A_Joint[CM1] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[Consolidation_View_Key] = "A4",             FT_COBUS_A_Joint[SBU_Key] = "PMU"         ),         CALCULATE (             SUM ( FT_COBUS_A_Joint[Standard_Quantity] ),             FILTER (                 ALL ( DT_Date ),                 DT_Date[Month_Number] <= SelectedMonth                     && DT_Date[Year] = MAX ( 'DT_Date (2)'[Year] )             ),             FT_COBUS_A_Joint[SBU_Key] = "PMU",             FT_COBUS_A_Joint[Consolidation_View_Key] = "J0"         ),         BLANK ()     ) * 1000			DT_Date; FT_COBUS_A_Joint; DT_Date (2)	DT_Date[Month_Number]; FT_COBUS_A_Joint[CM1]; DT_Date[Year]; DT_Date (2)[Year]; FT_COBUS_A_Joint[Consolidation_View_Key]; FT_COBUS_A_Joint[SBU_Key]; FT_COBUS_A_Joint[Standard_Quantity]
PYTD_Prim	 TOTALYTD ( [Actual Coins], SAMEPERIODLASTYEAR ( DT_Date[Date] ) ) / 1000	Actual Coins	YTD Delta_Prim	FT_COINS_S27E_PM; DT_Date	FT_COINS_S27E_PM[ACTUAL_EUR]; DT_Date[Date]
YTD_Prim_FX	 // This is the old caclulation using the ADJ_EUR value, after talk with Michael we will use the normal value so that will much with the other report // TOTALYTD ( SUM ( FT_COINS_S27E_PM[ACT_FX_ADJ_EUR] ), DT_Date[Date] ) / 1000 TOTALYTD (     SUM ( FT_COINS_S27E_PM[ACTUAL_EUR] ),     DT_Date[Date] ) / 1000		YTD Delta_Prim	FT_COINS_S27E_PM; DT_Date	FT_COINS_S27E_PM[ACTUAL_EUR]; DT_Date[Date]
YTD Delta_Prim	 [YTD_Prim_FX] - [PYTD_Prim]	YTD_Prim_FX; PYTD_Prim; Actual Coins		FT_COINS_S27E_PM; DT_Date	FT_COINS_S27E_PM[ACTUAL_EUR]; DT_Date[Date]
Actual Coins	 SUM ( FT_COINS_S27E_PM[ACTUAL_EUR] )		PYTD_Prim; YTD Delta_Prim	FT_COINS_S27E_PM	FT_COINS_S27E_PM[ACTUAL_EUR]
Maris_0_Act	 SUM ( FT_MARIS_VW[VALUE_EUR] ) / 1000 // Base Measure		TEST; Matrix_0_Act; Volume_FYFC_0_PM; Volume_effect_FYFC_1_PM; CM1_effect_FYFC_0_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; FixedCost_effect_FYFC_1_PM; Price_FYFC_0_PM; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; EBITbSI_effect_1_FYFC (Act till PM); EBITbSI_effect_1_FYFC (Act till PM)_SBU; FixedCost_effect_FYFC_0_CM; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; Volume_FYFC_0_CM; Volume_effect_FYFC_1_CM(for PM comp.); Volume_0_FYFC; Volume_0_YTD; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Volume_effect_1_YTD(for PY comp.); Volume_effect_1_FYFC(for PY comp.); Price_FYFC_0_CM; Price_effect_FYFC_1_CM(for PM comp.); Price_1_FYFC; Price_0_YTD; Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); Price_effect_1_YTD(for PY comp.); CM1_effect_FYFC_0_CM; CM1_effect_1_FYFC; CM1_effect_1_YTD; VarCost_effect_FYFC_0_CM(for PM comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); VarCost_effect_YTD(for PY comp.); EBITbSI_effect_FYFC_0_CM; EBITbSI_effect_1_YTD; EBITbSI_effect_1_FYFC; EBITbSI_effect_1_FYFC_SBU; EBITbSI_effect_2_YTD_SBU; EBITbSI_effect_FYFC_1_CM_SBU; FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; CM1_effect_0_PYTD; CM1_effect_0_PYFY; FixedCost_effect_0_PYTD; FixedCost_effect_0_PYFY; Price_0_PYTD; Price_effect_1_PYTD; Volume_0_PYTD; Volume_effect_1_PYTD; Volume_0_PYFY; Volume_effect_1_PYFY; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; CM1/kg_PYFY_VolumeCalc; VarCost_effect_PYTD; CM1/kg_PYFY_for_minus_CM1_operation; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_0_PYFY_for_minus_CM1_operation(for PY comp.); Volume_effect_1_PYFY_for_minus_CM1_operation	FT_MARIS_VW	FT_MARIS_VW[VALUE_EUR]
Matrix_0_Act	 //Note: Below are only initial calculations of KPIs. Further processing needed to get final value of KPI //Base Measure VAR Maris_0_Act =     SUM ( FT_MARIS_VW[VALUE_EUR] ) / 1000 //Volume_Act VAR Volume_0_Act =     SUM ( FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[Standard_Quantity_KG] ) / 1000000 //Price_Act VAR NetSales_0_Act =     CALCULATE ( [Maris_0_Act], KEEPFILTERS ( FT_MARIS_VW[ITEM] = "Net Sales" ) ) VAR Price_1_Act = NetSales_0_Act / Volume_0_Act //CM1_Act VAR CM1_0_Act =     CALCULATE ( [Maris_0_Act], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "4200003" ) ) //FixedCost_Act.... ( Fixed cost = CM1 - Ebit Bsi) VAR Ebitbsi_0_Act =     CALCULATE ( [Maris_0_Act], KEEPFILTERS ( FT_MARIS_VW[ITEM_KEY] = "4800033" ) ) //Ebit bsi item key should be 4800033. May have a mismatch VAR FixedCost_0_Act = CM1_0_Act - Ebitbsi_0_Act //VarCost_Act VAR VarCost_0_Act = CM1_0_Act - Volume_0_Act - Price_1_Act //Output1: Important... Fixed Costs adds negative effect. Hence, - for fixed cost in switch below VAR Output_1 =     SWITCH (         MAX ( DT_Matrix_Act_Table_ND[KPI] ),         "Volume", Volume_0_Act,         "Net Sales", NetSales_0_Act,         "Fixed Cost", - ( FixedCost_0_Act ),         "CM1", CM1_0_Act,         "Variable Cost", VarCost_0_Act,         "EBITbSI", Ebitbsi_0_Act,         "Price", Price_1_Act,         "Volume for CM11", Volume_0_Act     ) RETURN     Output_1	Maris_0_Act	TEST; Volume_FYFC_0_PM; Volume_effect_FYFC_1_PM; CM1_effect_FYFC_0_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; FixedCost_effect_FYFC_1_PM; Price_FYFC_0_PM; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; EBITbSI_effect_1_FYFC (Act till PM); EBITbSI_effect_1_FYFC (Act till PM)_SBU; FixedCost_effect_FYFC_0_CM; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; Volume_FYFC_0_CM; Volume_effect_FYFC_1_CM(for PM comp.); Volume_0_FYFC; Volume_0_YTD; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Volume_effect_1_YTD(for PY comp.); Volume_effect_1_FYFC(for PY comp.); Price_FYFC_0_CM; Price_effect_FYFC_1_CM(for PM comp.); Price_1_FYFC; Price_0_YTD; Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); Price_effect_1_YTD(for PY comp.); CM1_effect_FYFC_0_CM; CM1_effect_1_FYFC; CM1_effect_1_YTD; VarCost_effect_FYFC_0_CM(for PM comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); VarCost_effect_YTD(for PY comp.); EBITbSI_effect_FYFC_0_CM; EBITbSI_effect_1_YTD; EBITbSI_effect_1_FYFC; EBITbSI_effect_1_FYFC_SBU; EBITbSI_effect_2_YTD_SBU; EBITbSI_effect_FYFC_1_CM_SBU; FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; CM1_effect_0_PYTD; CM1_effect_0_PYFY; FixedCost_effect_0_PYTD; FixedCost_effect_0_PYFY; Price_0_PYTD; Price_effect_1_PYTD; Volume_0_PYTD; Volume_effect_1_PYTD; Volume_0_PYFY; Volume_effect_1_PYFY; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; CM1/kg_PYFY_VolumeCalc; VarCost_effect_PYTD; CM1/kg_PYFY_for_minus_CM1_operation; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_0_PYFY_for_minus_CM1_operation(for PY comp.); Volume_effect_1_PYFY_for_minus_CM1_operation	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]
EBITbSI_0_FC_Current	 VAR Selected =     SELECTEDVALUE ( DT_Date[Year] ) VAR test =     CALCULATE (         CALCULATE ( SUM ( Historical[Value] ) / 1000, Historical[check] = 1 ),         USERELATIONSHIP ( DT_Date[Date], Historical[Input_Date_for_CM] )     ) RETURN     test		Matrix_1_FC_Current; FixedCost_effect_1_FYFC; Volume_0_FYFC; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_FYFC(for PY comp.); Price_1_FYFC; Price_effect_1_FYFC(for BG comp.); CM1_effect_1_FYFC; VarCost_effect_FYFC(for BG comp.); EBITbSI_effect_1_FYFC; EBITbSI_effect_1_FYFC_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	DT_Date; Historical	DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_CM]
Matrix_1_FC_Current	 //Volume_FC VAR Volume_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Current],         KEEPFILTERS ( Historical[KPI] = "Volumes" )     ) //Price_FC VAR NetSales_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Current],         KEEPFILTERS ( Historical[KPI] = "Net Sales" )     ) VAR Price_FC_1 = NetSales_FC_0 / Volume_FC_0 //CM1_FC VAR CM1_FC_0 =     CALCULATE ( [EBITbSI_0_FC_Current], KEEPFILTERS ( Historical[KPI] = "CM 1" ) ) //FixedCost_FC.... ( Fixed cost = CM1 - Ebit Bsi) VAR Ebitbsi_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Current],         KEEPFILTERS ( Historical[KPI] = "EBITbSI" )     ) VAR FixedCost_FC_1 = CM1_FC_0 - Ebitbsi_FC_0 //VarCost_FC VAR VarCost_FC_2 = CM1_FC_0 - Volume_FC_0 - Price_FC_1 //Output1: Important... Fixed Costs adds negative effect. Hence, - for fixed cost in switch below VAR Output_1 =     CALCULATE (         SWITCH (             MAX ( DT_Matrix_Act_Table_ND[KPI] ),             "Volume", Volume_FC_0,             "Net Sales", NetSales_FC_0,             "Fixed Cost", - ( FixedCost_FC_1 ),             "CM1", CM1_FC_0,             "Variable Cost", VarCost_FC_2,             "EBITbSI", Ebitbsi_FC_0         )     ) RETURN     Output_1	EBITbSI_0_FC_Current	FixedCost_effect_1_FYFC; Volume_0_FYFC; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_FYFC(for PY comp.); Price_1_FYFC; Price_effect_1_FYFC(for BG comp.); CM1_effect_1_FYFC; VarCost_effect_FYFC(for BG comp.); EBITbSI_effect_1_FYFC; EBITbSI_effect_1_FYFC_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	DT_Date; Historical; DT_Matrix_Act_Table_ND	DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Matrix_Act_Table_ND[KPI]
EBITbSI_0_FC_Previous	 VAR Selected =     SELECTEDVALUE ( DT_Date[Year] ) VAR test =     CALCULATE (         CALCULATE ( SUM ( Historical[Value] ) / 1000, Historical[check] = 1 ),         USERELATIONSHIP ( DT_Date[Date], Historical[Input_Date_for_PM] )     ) RETURN     test		TEST; Matrix_1_FC_Previous; EBITbSI_effect_1_FYFC (Act till PM); EBITbSI_effect_1_FYFC (Act till PM)_SBU; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; Historical	DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_PM]
Matrix_1_FC_Previous	 //Volume_FC VAR Volume_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Previous],         KEEPFILTERS ( Historical[KPI] = "Volumes" )     ) //Price_FC VAR NetSales_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Previous],         KEEPFILTERS ( Historical[KPI] = "Net Sales" )     ) VAR Price_FC_1 = NetSales_FC_0 / Volume_FC_0 //CM1_FC VAR CM1_FC_0 =     CALCULATE ( [EBITbSI_0_FC_Previous], KEEPFILTERS ( Historical[KPI] = "CM 1" ) ) //FixedCost_FC.... ( Fixed cost = CM1 - Ebit Bsi) VAR Ebitbsi_FC_0 =     CALCULATE (         [EBITbSI_0_FC_Previous],         KEEPFILTERS ( Historical[KPI] = "EBITbSI" )     ) VAR FixedCost_FC_1 = CM1_FC_0 - Ebitbsi_FC_0 //VarCost_FC VAR VarCost_FC_2 = CM1_FC_0 - Volume_FC_0 - Price_FC_1 //Output1: Important... Fixed Costs adds negative effect. Hence, - for fixed cost in switch below VAR Output_1 =     CALCULATE (         SWITCH (             MAX ( DT_Matrix_Act_Table_ND[KPI] ),             "Volume", Volume_FC_0,             "Net Sales", NetSales_FC_0,             "Fixed Cost", - ( FixedCost_FC_1 ),             "CM1", CM1_FC_0,             "Variable Cost", VarCost_FC_2,             "EBITbSI", Ebitbsi_FC_0         )     ) RETURN     Output_1	EBITbSI_0_FC_Previous	TEST; EBITbSI_effect_1_FYFC (Act till PM); EBITbSI_effect_1_FYFC (Act till PM)_SBU; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; Historical; DT_Matrix_Act_Table_ND	DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_PM]; Historical[KPI]; DT_Matrix_Act_Table_ND[KPI]
Matrix_1_FC	 //Volume_FC VAR Volume_FC_0 =     CALCULATE ( [Ebit_0_FC], KEEPFILTERS ( Historical[KPI] = "Volumes" ) ) //Price_FC VAR NetSales_FC_0 =     CALCULATE ( [Ebit_0_FC], KEEPFILTERS ( Historical[KPI] = "Net Sales" ) ) VAR Price_FC_1 = NetSales_FC_0 / Volume_FC_0 //CM1_FC VAR CM1_FC_0 =     CALCULATE ( [Ebit_0_FC], KEEPFILTERS ( Historical[KPI] = "CM 1" ) ) //FixedCost_FC.... ( Fixed cost = CM1 - Ebit Bsi) VAR Ebitbsi_FC_0 =     CALCULATE ( [Ebit_0_FC], KEEPFILTERS ( Historical[KPI] = "EBITbSI" ) ) VAR FixedCost_FC_1 = CM1_FC_0 - Ebitbsi_FC_0 //VarCost_FC VAR VarCost_FC_2 = CM1_FC_0 - Volume_FC_0 - Price_FC_1 //Output1: Important... Fixed Costs adds negative effect. Hence, - for fixed cost in switch below VAR Output_1 =     CALCULATE (         SWITCH (             MAX ( DT_Matrix_Act_Table_ND[KPI] ),             "Volume", Volume_FC_0,             "Price", Price_FC_1,             "Fixed Cost", - ( FixedCost_FC_1 ),             "CM1", CM1_FC_0,             "Variable Cost", VarCost_FC_2,             "EBITbSI", Ebitbsi_FC_0         )     ) RETURN     Output_1	Ebit_0_FC	TEST; Volume_FYFC_0_PM; Volume_effect_FYFC_1_PM; CM1_effect_FYFC_0_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; FixedCost_effect_FYFC_1_PM; Price_FYFC_0_PM; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; FixedCost_effect_FYFC_0_CM; Volume_FYFC_0_CM; Volume_effect_FYFC_1_CM(for PM comp.); Price_FYFC_0_CM; Price_effect_FYFC_1_CM(for PM comp.); CM1_effect_FYFC_0_CM; VarCost_effect_FYFC_0_CM(for PM comp.); EBITbSI_effect_FYFC_0_CM; EBITbSI_effect_FYFC_1_CM_SBU; FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	Historical; DT_Matrix_Act_Table_ND	Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_Matrix_Act_Table_ND[KPI]
Ebit_0_BG	 SUM ( FT_Budget_EPME[Value] ) //Base Measure		Matrix_1_BG; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; CM1_effect_0_BGFY; CM1_effect_0_BG_YTD; Volume_0_BGFY; Volume_effect_0_BGFY; Volume_0_BG_YTD; Volume_effect_1_BG_YTD; CM1/kg_0_BGFY_VarCostCalc; CM1/kg_0_BGFY_VolumeCalc; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; FixedCost_effect_0_BGFY; FixedCost_effect_1_BG_YTD; EBITbSI_effect_0_BGFY; EBITbSI_effect_1_BG_YTD; Price_0_BGFY; Price_effect_1_BGFY; Price_0_BG_YTD; Price_effect_1_BG_YTD; VarCost_effect_0_BGFY; VarCost_effect_0_BG_YTD; EBITbSI_effect_0_BGFY_SBU	FT_Budget_EPME	FT_Budget_EPME[Value]
Matrix_1_BG	 //Volume_BG VAR Volume_BG_0 =     CALCULATE ( [Ebit_0_BG], KEEPFILTERS ( FT_Budget_EPME[KPI] = "Volumes" ) ) //Price_BG VAR NetSales_BG_0 =     CALCULATE (         [Ebit_0_BG],         FT_Budget_EPME[KPI]             IN { "Net Sales 3rd party", "Net Sales Transfers / Exports" }     ) VAR Price_BG_1 = NetSales_BG_0 / Volume_BG_0 //CM1_BG VAR CM1_BG_0 =     CALCULATE ( [Ebit_0_BG], KEEPFILTERS ( FT_Budget_EPME[KPI] = "CM1" ) ) //FixedCost_BG.... ( Fixed cost = CM1 - Ebit Bsi) VAR Ebitbsi_BG_0 =     CALCULATE ( [Ebit_0_BG], KEEPFILTERS ( FT_Budget_EPME[KPI] = "EBITbSI" ) ) VAR FixedCost_BG_1 = CM1_BG_0 - Ebitbsi_BG_0 //VarCost_BG VAR VarCost_BG_2 = CM1_BG_0 - Volume_BG_0 - Price_BG_1 //Output1: Important... Fixed Costs adds negative effect. Hence, - for fixed cost in switch below VAR Output_1 =     CALCULATE (         SWITCH (             MAX ( DT_Matrix_Act_Table_ND[KPI] ),             "Volume", Volume_BG_0,             "Price", Price_BG_1,             "Fixed Cost", - ( FixedCost_BG_1 ),             "CM1", CM1_BG_0,             "Variable Cost", VarCost_BG_2,             "EBITbSI", Ebitbsi_BG_0         )     ) RETURN     Output_1	Ebit_0_BG	Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; CM1_effect_0_BGFY; CM1_effect_0_BG_YTD; Volume_0_BGFY; Volume_effect_0_BGFY; Volume_0_BG_YTD; Volume_effect_1_BG_YTD; CM1/kg_0_BGFY_VarCostCalc; CM1/kg_0_BGFY_VolumeCalc; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; FixedCost_effect_0_BGFY; FixedCost_effect_1_BG_YTD; EBITbSI_effect_0_BGFY; EBITbSI_effect_1_BG_YTD; Price_0_BGFY; Price_effect_1_BGFY; Price_0_BG_YTD; Price_effect_1_BG_YTD; VarCost_effect_0_BGFY; VarCost_effect_0_BG_YTD; EBITbSI_effect_0_BGFY_SBU	FT_Budget_EPME; DT_Matrix_Act_Table_ND	FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
Volume_FYFC_0_PM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "Volume"          ),         DT_Date[Month_Number] < MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "Volume"          ),         DT_Date[Month_Number] >= MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; Volume_effect_FYFC_1_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; Volume_effect_FYFC_1_CM(for PM comp.); Price_effect_FYFC_1_CM(for PM comp.); VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Volume_effect_FYFC_1_PM	[Volume_FYFC_0_PM] * [CM1/kg_FYFC_0_PM_VolumeCalc]	Volume_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM	TEST; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
CM1_effect_FYFC_0_PM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),             DT_Matrix_Act_Table_ND[KPI] = "CM1"         ),         DT_Date[Month_Number] < MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),             DT_Matrix_Act_Table_ND[KPI] = "CM1"          ),         DT_Date[Month_Number] >= MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; Volume_effect_FYFC_1_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; VarCost_effect_FYFC_0_PM; Volume_effect_FYFC_1_CM(for PM comp.); VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
CM1/kg_FYFC_0_PM_VolumeCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Volume",     CALCULATE (         DIVIDE ( [CM1_effect_FYFC_0_PM], [Volume_FYFC_0_PM] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. CM1/kg FYFC PM = CM1 effect FYFC PM / Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, CM1 and Volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to divide: CM1 / Volume, we get a blank, as CM1 and volume are on different lines.  4. The CALCULATE code snippet helps us to divide them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Volume'.  Why??  Because we use CM1/kg to calculate Volume effect later.   6. Hence IF - Selectedvalue used. Now, we get an output only for 'Volume'.  */	CM1_effect_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_PM	TEST; Volume_effect_FYFC_1_PM; Volume_effect_FYFC_1_CM(for PM comp.); FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
CM1/kg_FYFC_0_PM_VarCostCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",     CALCULATE (         DIVIDE ( [CM1_effect_FYFC_0_PM], [Volume_FYFC_0_PM], 0 ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. CM1/kg FYFC PM = CM1 effect FYFC PM / Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, CM1 and Volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to divide: CM1 / Volume, we get a blank, as CM1 and volume are on different lines.  4. The CALCULATE code snippet helps us to divide them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Variable cost'.  Why??  Because we use CM1/kg to calculate Variable cost effect  later.   6. Hence IF - Selectedvalue used. Now, we get an output only for 'Variable cost'.  */	CM1_effect_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_PM	TEST; VarCost_effect_FYFC_0_PM; VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
FixedCost_effect_FYFC_1_PM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),             DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost"          ),         DT_Date[Month_Number] < MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost"          ),         DT_Date[Month_Number] >= MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Price_FYFC_0_PM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Price" )         ),         DT_Date[Month_Number] < MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Price" )         ),         DT_Date[Month_Number] >= MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Price_effect_FYFC_1_PM	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_FYFC_0_PM] * [Volume_FYFC_0_PM],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. Price effect FYFC PM = Price FYFC PM * Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, Price and volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to multiply: Price * Volume, we get a blank, as price and volume are on different lines.  4. The CALCULATE code snippet helps us to multiply them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Price'.  6. Hence IF - Selectedvalue used. Now, we get an output only for 'Price'.  */	Price_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_PM	TEST; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
VarCost_effect_FYFC_0_PM	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_FYFC_0_PM], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeinVarCost =     CALCULATE ( [Volume_FYFC_0_PM], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR VolumeEffect = VolumeinVarCost * [CM1/kg_FYFC_0_PM_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_FYFC_0_PM] * [Volume_FYFC_0_PM],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output /*   1. Var Cost effect = CM1 effect - Volume effect - Price effect  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Ans: In KPI table, CM1, Volume, Price and Var cost are unique items. When I build a table visual with KPI column and them put the CM1 effect, Volume effect, Price effect too, each is in a separate line.  For them to be in 1 line (Var cost), I need to write above code.  4. Most important: The code for Volume Effect merits a detailed explanation.  Volume effect = volume * CM1/kg Let us look at the predicate of the equation above (i.e. what is after =)    Volume:    Originally, Volume is found against 'Volume' KPI.    We want it to show up for 'Variable cost'. We get via the variable "VolumeinVarCost"     CM1/kg:     In the [CM1/kg_FYFC_3_PM_VarCostCalc], we have coded the numbers to show up for Variable cost    (FYI: [CM1/kg_FYFC_3_PM_VolumeCalc] is also available, its not used here, but for Volume calculations)     Now both Volume and CM1/kg are available in the line for KPI 'Variable Cost'.     In Variable 'VolumeEffect' we now multiply Volume * CM1/kg  5. Code for Price effect: I have recalculated price effect here instead of using formula already available for price effect. Recalculation necessary, else I would have no output    */	CM1_effect_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_PM; CM1/kg_FYFC_0_PM_VarCostCalc; Price_FYFC_0_PM	TEST; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
EBITbSI_effect_1_FYFC (Act till PM)	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_short] ),                  REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "EBITbSI"          ),         DT_Date[Month_Number] < MonthSel     )         + CALCULATE (             [Matrix_1_FC_Previous],                 REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),            DT_Matrix_Act_Table_ND[KPI] = "EBITbSI"          ) RETURN     Act 	Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Previous; EBITbSI_0_FC_Previous	TEST; EBITbSI_effect_1_FYFC (Act till PM)_SBU; FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_PM]; Historical[KPI]
EBITbSI_effect_1_FYFC (Act till PM)_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7,         CALCULATE (             SUMX ( DT_SBU, [EBITbSI_effect_1_FYFC (Act till PM)] ),             ALL ( DT_SBU )         ),     CALCULATE (         [EBITbSI_effect_1_FYFC (Act till PM)],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	EBITbSI_effect_1_FYFC (Act till PM); Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Previous; EBITbSI_0_FC_Previous		SBU_Keys_disconected; DT_SBU; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	SBU_Keys_disconected[ID]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; DT_Date[Date]; Historical[Input_Date_for_PM]; Historical[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
FixedCost_effect_FYFC_0_CM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),            DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost"          ),         DT_Date[Month_Number] <= MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),             DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost"          ),         DT_Date[Month_Number] > MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
FixedCost_effect_1_FYFC	 [FixedCost_effect_2_YTD]     + CALCULATE (         [Matrix_1_FC_Current],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost" )     )	FixedCost_effect_2_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current	Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
FixedCost_effect_2_YTD	 TOTALYTD (     CALCULATE (         [Matrix_0_Act],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost" )     ),     DT_Date[Date] )	Matrix_0_Act; Maris_0_Act	FixedCost_effect_1_FYFC; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; FixedCost_effect_0_PYTD	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_FYFC_0_CM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),            DT_Matrix_Act_Table_ND[KPI] = "Volume"          ),         DT_Date[Month_Number] <= MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS(DT_Matrix_Act_Table_ND[KPI]),             DT_Matrix_Act_Table_ND[KPI] = "Volume"          ),         DT_Date[Month_Number] > MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; Volume_effect_FYFC_1_CM(for PM comp.); VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Volume_effect_FYFC_1_CM(for PM comp.)	[Volume_FYFC_0_CM] * [CM1/kg_FYFC_0_PM_VolumeCalc]	Volume_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM; Volume_FYFC_0_PM	TEST; FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Volume_0_FYFC	 [Volume_0_YTD]     + CALCULATE (         [Matrix_1_FC_Current],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" )     )	Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current	Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_FYFC(for PY comp.); Price_1_FYFC; Price_effect_1_FYFC(for BG comp.); VarCost_effect_FYFC(for BG comp.); Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
Volume_0_YTD	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     TOTALYTD (         CALCULATE (             [Matrix_0_Act],             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" )         ),         DT_Date[Date]     ) RETURN     Act	Matrix_0_Act; Maris_0_Act	Volume_0_FYFC; Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Volume_effect_1_YTD(for PY comp.); Volume_effect_1_FYFC(for PY comp.); Price_1_FYFC; Price_0_YTD; Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); Price_effect_1_YTD(for PY comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); VarCost_effect_YTD(for PY comp.); Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; Price_0_PYTD; Price_effect_1_PYTD; Volume_0_PYTD; Volume_effect_1_PYTD; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; VarCost_effect_PYTD; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_effect_1_FYFC(for BG comp.)	[Volume_0_FYFC] * [CM1/kg_0_BGFY_VolumeCalc]	Volume_0_FYFC; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY	Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.)	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical; FT_Budget_EPME	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Volume_effect_1_YTD(for BG comp.)	[Volume_0_YTD] * [CM1/kg_0_BG_YTD_VolumeCalc]	Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_0_BG_YTD_VolumeCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY	Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.)	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; FT_Budget_EPME	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Volume_effect_1_YTD(for PY comp.)	[Volume_0_YTD] * [CM1/kg_PYTD_VolumeCalc]	Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_PYTD_VolumeCalc; CM1_effect_0_PYTD; CM1_effect_1_YTD; Volume_0_PYTD	Act_YTD_0(for PY comp.); Delta_1_PYTD_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_effect_1_FYFC(for PY comp.)	 [Volume_0_FYFC] * [CM1/kg_PYFY_VolumeCalc]	Volume_0_FYFC; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_PYFY_VolumeCalc; CM1_effect_0_PYFY; Volume_0_PYFY	Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
Price_FYFC_0_CM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Price" )         ),         DT_Date[Month_Number] <= MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Price" )         ),         DT_Date[Month_Number] > MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; Price_effect_FYFC_1_CM(for PM comp.); VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Price_effect_FYFC_1_CM(for PM comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_FYFC_0_CM] * [Volume_FYFC_0_PM],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. Price effect FYFC CM = Price FYFC CM * Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, Price and volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to multiply: Price * Volume, we get a blank, as price and volume are on different lines.  4. The CALCULATE code snippet helps us to multiply them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Price'.  6. Hence IF - Selectedvalue used. Now, we get an output only for 'Price'.  */	Price_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_PM	TEST; FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
Price_1_FYFC	 VAR NetSales_in_all_KPI_FYFC =     TOTALYTD (         CALCULATE (             [Matrix_0_Act],             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Net Sales" )         ),         DT_Date[Date]     )         + CALCULATE (             [Matrix_1_FC_Current],             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Net Sales" )         ) VAR Volume_in_all_KPI_FYFC =     CALCULATE ( [Volume_0_FYFC], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR Price_in_all_KPI_FYFC =     DIVIDE ( NetSales_in_all_KPI_FYFC, Volume_in_all_KPI_FYFC ) RETURN     Price_in_all_KPI_FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; Volume_0_FYFC; Volume_0_YTD	Price_effect_1_FYFC(for BG comp.); VarCost_effect_FYFC(for BG comp.); Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.)	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_Number]
Price_0_YTD	 VAR NetSales_in_all_KPI_YTD =     TOTALYTD (         CALCULATE (             [Matrix_0_Act],             KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Net Sales" )         ),         DT_Date[Date]     ) VAR Volume_in_all_KPI_YTD =     CALCULATE ( [Volume_0_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR Price_in_all_KPI_YTD =     DIVIDE ( NetSales_in_all_KPI_YTD, Volume_in_all_KPI_YTD ) RETURN     Price_in_all_KPI_YTD 	Matrix_0_Act; Maris_0_Act; Volume_0_YTD	Price_effect_1_YTD(for BG comp.); Price_effect_1_YTD(for PY comp.); VarCost_effect_YTD(for BG comp.); VarCost_effect_YTD(for PY comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Price_0_PYTD; Price_effect_1_PYTD; VarCost_effect_PYTD	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_Number]
Price_effect_1_FYFC(for BG comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_1_FYFC] * [Volume_0_BGFY],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	Price_1_FYFC; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; Volume_0_FYFC; Volume_0_YTD; Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG	Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.)	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date; Historical; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_Number]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Price_effect_1_YTD(for BG comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_0_YTD] * [Volume_0_BG_YTD],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	Price_0_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD; Volume_0_BG_YTD; Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG	Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.)	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_Number]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Price_effect_1_YTD(for PY comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_0_YTD] * [Volume_0_PYTD],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	Price_0_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD; Volume_0_PYTD	Act_YTD_0(for PY comp.); Delta_1_PYTD_SBU	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_Number]
CM1_effect_FYFC_0_CM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),              REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "CM1"          ),         DT_Date[Month_Number] <= MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "CM1"          ),         DT_Date[Month_Number] > MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; VarCost_effect_FYFC_0_CM(for PM comp.); FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
CM1_effect_1_FYFC	 [CM1_effect_1_YTD]     + CALCULATE (         [Matrix_1_FC_Current],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "CM1" )     )	CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current	VarCost_effect_FYFC(for BG comp.); Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
CM1_effect_1_YTD	 TOTALYTD (     CALCULATE (         [Matrix_0_Act],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "CM1" )     ),     DT_Date[Date] )	Matrix_0_Act; Maris_0_Act	Volume_effect_1_YTD(for PY comp.); CM1_effect_1_FYFC; VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); VarCost_effect_YTD(for PY comp.); Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; CM1_effect_0_PYTD; Volume_effect_1_PYTD; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; VarCost_effect_PYTD	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
VarCost_effect_FYFC_0_CM(for PM comp.)	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_FYFC_0_CM], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeinVarCost =     CALCULATE ( [Volume_FYFC_0_CM], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR VolumeEffect = VolumeinVarCost * [CM1/kg_FYFC_0_PM_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_FYFC_0_CM] * [Volume_FYFC_0_PM],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output /*   1. Var Cost effect = CM1 effect - Volume effect - Price effect  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Ans: In KPI table, CM1, Volume, Price and Var cost are unique items. When I build a table visual with KPI column and them put the CM1 effect, Volume effect, Price effect too, each is in a separate line.  For them to be in 1 line (Var cost), I need to write above code.  4. Most important: The code for Volume Effect merits a detailed explanation.  Volume effect = volume * CM1/kg Let us look at the predicate of the equation above (i.e. what is after =)    Volume:    Originally, Volume is found against 'Volume' KPI.    We want it to show up for 'Variable cost'. We get via the variable "VolumeinVarCost"     CM1/kg:     In the [CM1/kg_FYFC_3_PM_VarCostCalc], we have coded the numbers to show up for Variable cost    (FYI: [CM1/kg_FYFC_3_PM_VolumeCalc] is also available, its not used here, but for Volume calculations)     Now both Volume and CM1/kg are available in the line for KPI 'Variable Cost'.     In Variable 'VolumeEffect' we now multiply Volume * CM1/kg    */	CM1_effect_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; Volume_FYFC_0_CM; CM1/kg_FYFC_0_PM_VarCostCalc; CM1_effect_FYFC_0_PM; Volume_FYFC_0_PM; Price_FYFC_0_CM	TEST; FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
VarCost_effect_FYFC(for BG comp.)	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_1_FYFC], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeEffect =     CALCULATE ( [Volume_0_FYFC], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) * [CM1/kg_0_BGFY_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_1_FYFC] * [Volume_0_BGFY],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output	CM1_effect_1_FYFC; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; Volume_0_FYFC; Volume_0_YTD; CM1/kg_0_BGFY_VarCostCalc; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY; Price_1_FYFC	Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.)	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical; FT_Budget_EPME	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_Number]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
VarCost_effect_YTD(for BG comp.)	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_1_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeEffect =     CALCULATE ( [Volume_0_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) * [CM1/kg_0_BG_YTD_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_0_YTD] * [Volume_0_BG_YTD],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output	CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD; CM1/kg_0_BG_YTD_VarCostCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY; Price_0_YTD	Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.)	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_Number]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
VarCost_effect_YTD(for PY comp.)	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_1_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeEffect =     CALCULATE ( [Volume_0_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) * [CM1/kg_PYTD_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_0_YTD] * [Volume_0_PYTD],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output	CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD; CM1/kg_PYTD_VarCostCalc; CM1_effect_0_PYTD; Volume_0_PYTD; Price_0_YTD	Act_YTD_0(for PY comp.); Delta_1_PYTD_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_Number]
EBITbSI_effect_FYFC_0_CM	 VAR MonthSel =     SELECTEDVALUE ( DT_Date[Month_Number] ) VAR Act =     CALCULATE (         CALCULATE (             [Matrix_0_Act],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "EBITbSI"          ),         DT_Date[Month_Number] <= MonthSel     ) VAR FC =     CALCULATE (         CALCULATE (             [Matrix_1_FC],             ALL ( DT_Date[Month_Name] ),             REMOVEFILTERS( DT_Matrix_Act_Table_ND[KPI]),              DT_Matrix_Act_Table_ND[KPI] = "EBITbSI"          ),         DT_Date[Month_Number] > MonthSel     ) VAR FYFC = Act + FC RETURN     FYFC 	Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC	TEST; EBITbSI_effect_FYFC_1_CM_SBU; FYFC_CM_0_(for PM comp.); Delta_FYFC_2_CM_PM_month_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
EBITbSI_effect_1_YTD	 TOTALYTD (     CALCULATE (         [Matrix_0_Act],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "EBITbSI" )     ),     DT_Date[Date] )	Matrix_0_Act; Maris_0_Act	EBITbSI_effect_1_FYFC; EBITbSI_effect_1_FYFC_SBU; EBITbSI_effect_2_YTD_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); Act_YTD_0(for PY comp.); Delta_1_PYTD_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
EBITbSI_effect_1_FYFC	 [EBITbSI_effect_1_YTD]     + CALCULATE (         [Matrix_1_FC_Current],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "EBITbSI" )     )	EBITbSI_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current	EBITbSI_effect_1_FYFC_SBU; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.)	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
EBITbSI_effect_1_FYFC_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7, CALCULATE ( SUMX ( DT_SBU, [EBITbSI_effect_1_FYFC] ), ALL ( DT_SBU ) ),     CALCULATE (         [EBITbSI_effect_1_FYFC],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	EBITbSI_effect_1_FYFC; EBITbSI_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current		SBU_Keys_disconected; DT_SBU; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	SBU_Keys_disconected[ID]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
EBITbSI_effect_2_YTD_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7, CALCULATE ( SUMX ( DT_SBU, [EBITbSI_effect_1_YTD] ), ALL ( DT_SBU ) ),     CALCULATE (         [EBITbSI_effect_1_YTD],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	EBITbSI_effect_1_YTD; Matrix_0_Act; Maris_0_Act		SBU_Keys_disconected; DT_SBU; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	SBU_Keys_disconected[ID]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
EBITbSI_effect_FYFC_1_CM_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7, CALCULATE ( SUMX ( DT_SBU, [EBITbSI_effect_FYFC_0_CM] ), ALL ( DT_SBU ) ),     CALCULATE (         [EBITbSI_effect_FYFC_0_CM],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	EBITbSI_effect_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC		SBU_Keys_disconected; DT_SBU; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; Historical	SBU_Keys_disconected[ID]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
FYFC_CM_0_(for PM comp.)	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_FYFC_1_CM(for PM comp.)],     "Price", [Price_effect_FYFC_1_CM(for PM comp.)],     "Fixed Cost", [FixedCost_effect_FYFC_0_CM],     "CM1", [CM1_effect_FYFC_0_CM],     "Variable Cost", [VarCost_effect_FYFC_0_CM(for PM comp.)],     "EBITbSI", [EBITbSI_effect_FYFC_0_CM],      [Volume_effect_FYFC_1_CM(for PM comp.)] + [Price_effect_FYFC_1_CM(for PM comp.)]+[FixedCost_effect_FYFC_0_CM]+ [VarCost_effect_FYFC_0_CM(for PM comp.)] + [EBITbSI_effect_FYFC_0_CM] + [CM1_effect_FYFC_0_CM] )	Volume_effect_FYFC_1_CM(for PM comp.); Volume_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM; Volume_FYFC_0_PM; Price_effect_FYFC_1_CM(for PM comp.); Price_FYFC_0_CM; FixedCost_effect_FYFC_0_CM; CM1_effect_FYFC_0_CM; VarCost_effect_FYFC_0_CM(for PM comp.); CM1/kg_FYFC_0_PM_VarCostCalc; EBITbSI_effect_FYFC_0_CM	TEST; Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]
FYFC_0_PM	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_FYFC_1_PM],     "Price", [Price_effect_FYFC_1_PM],     "Fixed Cost", [FixedCost_effect_FYFC_1_PM],     "CM1", [CM1_effect_FYFC_0_PM],     "Variable Cost", [VarCost_effect_FYFC_0_PM],     "EBITbSI", [EBITbSI_effect_1_FYFC (Act till PM)],    [Volume_effect_FYFC_1_PM] + [Price_effect_FYFC_1_PM] + [FixedCost_effect_FYFC_1_PM] + [VarCost_effect_FYFC_0_PM] +  [CM1_effect_FYFC_0_PM] + [EBITbSI_effect_1_FYFC (Act till PM)] )	Volume_effect_FYFC_1_PM; Volume_FYFC_0_PM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM; Price_effect_FYFC_1_PM; Price_FYFC_0_PM; FixedCost_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; CM1/kg_FYFC_0_PM_VarCostCalc; EBITbSI_effect_1_FYFC (Act till PM); Matrix_1_FC_Previous; EBITbSI_0_FC_Previous	TEST; Delta_FYFC_2_CM_PM_month_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_Date[Month_short]; DT_Date[Year]; Historical[check]; DT_Date[Date]; Historical[Input_Date_for_PM]
Delta_FYFC_2_CM_PM_month_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7,         CALCULATE (             SUMX ( DT_SBU, [FYFC_CM_0_(for PM comp.)] - [FYFC_0_PM] ),             ALL ( DT_SBU )         ),     CALCULATE (         [FYFC_CM_0_(for PM comp.)] - [FYFC_0_PM],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	FYFC_CM_0_(for PM comp.); Volume_effect_FYFC_1_CM(for PM comp.); Volume_FYFC_0_CM; Matrix_0_Act; Maris_0_Act; Matrix_1_FC; Ebit_0_FC; CM1/kg_FYFC_0_PM_VolumeCalc; CM1_effect_FYFC_0_PM; Volume_FYFC_0_PM; Price_effect_FYFC_1_CM(for PM comp.); Price_FYFC_0_CM; FixedCost_effect_FYFC_0_CM; CM1_effect_FYFC_0_CM; VarCost_effect_FYFC_0_CM(for PM comp.); CM1/kg_FYFC_0_PM_VarCostCalc; EBITbSI_effect_FYFC_0_CM; FYFC_0_PM; Volume_effect_FYFC_1_PM; Price_effect_FYFC_1_PM; Price_FYFC_0_PM; FixedCost_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; EBITbSI_effect_1_FYFC (Act till PM); Matrix_1_FC_Previous; EBITbSI_0_FC_Previous		SBU_Keys_disconected; DT_SBU; DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	SBU_Keys_disconected[ID]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Month_Name]; Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]; Historical[KPI]; DT_Date[Month_short]; DT_Date[Year]; Historical[check]; DT_Date[Date]; Historical[Input_Date_for_PM]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
FYBG_0	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_0_BGFY],     "Price", [Price_effect_1_BGFY],     "Fixed Cost", [FixedCost_effect_0_BGFY],     "CM1", [CM1_effect_0_BGFY],     "Variable Cost", [VarCost_effect_0_BGFY],     "EBITbSI", [EBITbSI_effect_0_BGFY] )	Volume_effect_0_BGFY; Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY; Price_effect_1_BGFY; Price_0_BGFY; FixedCost_effect_0_BGFY; VarCost_effect_0_BGFY; CM1/kg_0_BGFY_VarCostCalc; EBITbSI_effect_0_BGFY	Delta_1_BGFY; Delta_2_BGFY_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Delta_1_BGFY	[FYFC_1(for BG comp.)] - [FYBG_0]	FYFC_1(for BG comp.); Volume_effect_1_FYFC(for BG comp.); Volume_0_FYFC; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY; Price_effect_1_FYFC(for BG comp.); Price_1_FYFC; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; CM1_effect_1_FYFC; CM1_effect_1_YTD; VarCost_effect_FYFC(for BG comp.); CM1/kg_0_BGFY_VarCostCalc; EBITbSI_effect_1_FYFC; EBITbSI_effect_1_YTD; FYBG_0; Volume_effect_0_BGFY; Price_effect_1_BGFY; Price_0_BGFY; FixedCost_effect_0_BGFY; VarCost_effect_0_BGFY; EBITbSI_effect_0_BGFY	Delta_2_BGFY_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Delta_2_BGFY_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7, CALCULATE ( SUMX ( DT_SBU, [Delta_1_BGFY] ), ALL ( DT_SBU ) ),     CALCULATE (         [Delta_1_BGFY],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	Delta_1_BGFY; FYFC_1(for BG comp.); Volume_effect_1_FYFC(for BG comp.); Volume_0_FYFC; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY; Price_effect_1_FYFC(for BG comp.); Price_1_FYFC; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; CM1_effect_1_FYFC; CM1_effect_1_YTD; VarCost_effect_FYFC(for BG comp.); CM1/kg_0_BGFY_VarCostCalc; EBITbSI_effect_1_FYFC; EBITbSI_effect_1_YTD; FYBG_0; Volume_effect_0_BGFY; Price_effect_1_BGFY; Price_0_BGFY; FixedCost_effect_0_BGFY; VarCost_effect_0_BGFY; EBITbSI_effect_0_BGFY		SBU_Keys_disconected; DT_SBU; DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical; FT_Budget_EPME	SBU_Keys_disconected[ID]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
FYFC_1(for BG comp.)	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_FYFC(for BG comp.)],     "Price", [Price_effect_1_FYFC(for BG comp.)],     "Fixed Cost", [FixedCost_effect_1_FYFC],     "CM1", [CM1_effect_1_FYFC],     "Variable Cost", [VarCost_effect_FYFC(for BG comp.)],     "EBITbSI", [EBITbSI_effect_1_FYFC] )	Volume_effect_1_FYFC(for BG comp.); Volume_0_FYFC; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY; Price_effect_1_FYFC(for BG comp.); Price_1_FYFC; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; CM1_effect_1_FYFC; CM1_effect_1_YTD; VarCost_effect_FYFC(for BG comp.); CM1/kg_0_BGFY_VarCostCalc; EBITbSI_effect_1_FYFC; EBITbSI_effect_1_YTD	Delta_1_BGFY; Delta_2_BGFY_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Delta_2_YTD_BG_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7,         CALCULATE (             SUMX ( DT_SBU, ( [Act_YTD_1(for BG comp.)] - [BGYTD_0] ) ),             ALL ( DT_SBU )         ),     CALCULATE (         ( [Act_YTD_1(for BG comp.)] - [BGYTD_0] ),         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	Act_YTD_1(for BG comp.); Volume_effect_1_YTD(for BG comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_0_BG_YTD_VolumeCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY; Price_effect_1_YTD(for BG comp.); Price_0_YTD; FixedCost_effect_2_YTD; CM1_effect_1_YTD; VarCost_effect_YTD(for BG comp.); CM1/kg_0_BG_YTD_VarCostCalc; EBITbSI_effect_1_YTD; BGYTD_0; Volume_effect_1_BG_YTD; Price_effect_1_BG_YTD; Price_0_BG_YTD; Price_0_BGFY; FixedCost_effect_1_BG_YTD; FixedCost_effect_0_BGFY; VarCost_effect_0_BG_YTD; EBITbSI_effect_1_BG_YTD; EBITbSI_effect_0_BGFY		SBU_Keys_disconected; DT_SBU; DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; FT_Budget_EPME	SBU_Keys_disconected[ID]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
Act_YTD_1(for BG comp.)	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_YTD(for BG comp.)],     "Price", [Price_effect_1_YTD(for BG comp.)],     "Fixed Cost", [FixedCost_effect_2_YTD],     "CM1", [CM1_effect_1_YTD],     "Variable Cost", [VarCost_effect_YTD(for BG comp.)],     "EBITbSI", [EBITbSI_effect_1_YTD] )	Volume_effect_1_YTD(for BG comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_0_BG_YTD_VolumeCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY; Price_effect_1_YTD(for BG comp.); Price_0_YTD; FixedCost_effect_2_YTD; CM1_effect_1_YTD; VarCost_effect_YTD(for BG comp.); CM1/kg_0_BG_YTD_VarCostCalc; EBITbSI_effect_1_YTD	Delta_2_YTD_BG_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
BGYTD_0	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_BG_YTD],     "Price", [Price_effect_1_BG_YTD],     "Fixed Cost", [FixedCost_effect_1_BG_YTD],     "CM1", [CM1_effect_0_BG_YTD],     "Variable Cost", [VarCost_effect_0_BG_YTD],     "EBITbSI", [EBITbSI_effect_1_BG_YTD] )	Volume_effect_1_BG_YTD; Volume_0_BG_YTD; Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG; CM1/kg_0_BG_YTD_VolumeCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Price_effect_1_BG_YTD; Price_0_BG_YTD; Price_0_BGFY; FixedCost_effect_1_BG_YTD; FixedCost_effect_0_BGFY; VarCost_effect_0_BG_YTD; CM1/kg_0_BG_YTD_VarCostCalc; EBITbSI_effect_1_BG_YTD; EBITbSI_effect_0_BGFY	Delta_2_YTD_BG_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Date[Date]
Act_YTD_0(for PY comp.)	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_YTD(for PY comp.)],     "Price", [Price_effect_1_YTD(for PY comp.)],     "Fixed Cost", [FixedCost_effect_2_YTD],     "CM1", [CM1_effect_1_YTD],     "Variable Cost", [VarCost_effect_YTD(for PY comp.)],     "EBITbSI", [EBITbSI_effect_1_YTD] )	Volume_effect_1_YTD(for PY comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_PYTD_VolumeCalc; CM1_effect_0_PYTD; CM1_effect_1_YTD; Volume_0_PYTD; Price_effect_1_YTD(for PY comp.); Price_0_YTD; FixedCost_effect_2_YTD; VarCost_effect_YTD(for PY comp.); CM1/kg_PYTD_VarCostCalc; EBITbSI_effect_1_YTD	Delta_1_PYTD_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
PYTD_0	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_PYTD],     "Price", [Price_effect_1_PYTD],     "Fixed Cost", [FixedCost_effect_0_PYTD],     "CM1", [CM1_effect_0_PYTD],     "Variable Cost", [VarCost_effect_PYTD] )	Volume_effect_1_PYTD; Volume_0_PYTD; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_PYTD_VolumeCalc; CM1_effect_0_PYTD; CM1_effect_1_YTD; Price_effect_1_PYTD; Price_0_PYTD; Price_0_YTD; FixedCost_effect_0_PYTD; FixedCost_effect_2_YTD; VarCost_effect_PYTD; CM1/kg_PYTD_VarCostCalc	Delta_1_PYTD_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Delta_1_PYTD_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7,         CALCULATE (             SUMX ( DT_SBU, ( [Act_YTD_0(for PY comp.)] - [PYTD_0] ) ),             ALL ( DT_SBU )         ),     CALCULATE (         ( [Act_YTD_0(for PY comp.)] - [PYTD_0] ),         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	Act_YTD_0(for PY comp.); Volume_effect_1_YTD(for PY comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_PYTD_VolumeCalc; CM1_effect_0_PYTD; CM1_effect_1_YTD; Volume_0_PYTD; Price_effect_1_YTD(for PY comp.); Price_0_YTD; FixedCost_effect_2_YTD; VarCost_effect_YTD(for PY comp.); CM1/kg_PYTD_VarCostCalc; EBITbSI_effect_1_YTD; PYTD_0; Volume_effect_1_PYTD; Price_effect_1_PYTD; Price_0_PYTD; FixedCost_effect_0_PYTD; VarCost_effect_PYTD		SBU_Keys_disconected; DT_SBU; DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	SBU_Keys_disconected[ID]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
Act_FYFC_0(for PY comp.)	 VAR CM1 = [CM1_effect_1_FYFC] - [Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)] RETURN     SWITCH (         MAX ( DT_Matrix_Act_Table_ND[KPI] ),         "Volume", [Volume_effect_1_FYFC(for PY comp.)],         "Fixed Cost", [FixedCost_effect_1_FYFC],         "CM1", CM1     )	CM1_effect_1_FYFC; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_0_FYFC_for_minus_CM1_operation; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_YTD; CM1/kg_PYFY_for_minus_CM1_operation; CM1_effect_0_PYFY; Volume_0_PYFY; Volume_effect_1_FYFC(for PY comp.); Volume_0_FYFC; CM1/kg_PYFY_VolumeCalc; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD	Delta_1_PYFY_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_Number]
PYFY_0	 SWITCH (     MAX ( DT_Matrix_Act_Table_ND[KPI] ),     "Volume", [Volume_effect_1_PYFY],     "Fixed Cost", [FixedCost_effect_0_PYFY],     "CM1", [CM1_effect_0_PYFY] - [Volume_effect_1_PYFY_for_minus_CM1_operation] )	Volume_effect_1_PYFY; Volume_0_PYFY; Matrix_0_Act; Maris_0_Act; CM1/kg_PYFY_VolumeCalc; CM1_effect_0_PYFY; FixedCost_effect_0_PYFY; Volume_effect_1_PYFY_for_minus_CM1_operation; Volume_0_PYFY_for_minus_CM1_operation(for PY comp.); CM1/kg_PYFY_for_minus_CM1_operation	Delta_1_PYFY_SBU	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Delta_1_PYFY_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7,         CALCULATE (             SUMX ( DT_SBU, ( [Act_FYFC_0(for PY comp.)] - [PYFY_0] ) ),             ALL ( DT_SBU )         ),     CALCULATE (         ( [Act_FYFC_0(for PY comp.)] - [PYFY_0] ),         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) )	Act_FYFC_0(for PY comp.); CM1_effect_1_FYFC; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_0_FYFC_for_minus_CM1_operation; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_YTD; CM1/kg_PYFY_for_minus_CM1_operation; CM1_effect_0_PYFY; Volume_0_PYFY; Volume_effect_1_FYFC(for PY comp.); Volume_0_FYFC; CM1/kg_PYFY_VolumeCalc; FixedCost_effect_1_FYFC; FixedCost_effect_2_YTD; PYFY_0; Volume_effect_1_PYFY; FixedCost_effect_0_PYFY; Volume_effect_1_PYFY_for_minus_CM1_operation; Volume_0_PYFY_for_minus_CM1_operation(for PY comp.)		SBU_Keys_disconected; DT_SBU; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date; Historical	SBU_Keys_disconected[ID]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]; DT_Date[Month_Number]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
CM1_effect_0_BGFY	 VAR Sel =     SELECTEDVALUE ( DT_Date[Month_short] ) VAR BGFY =     CALCULATE (         [Matrix_1_BG],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "CM1" ),         ALL ( DT_Date[Month_short] )     ) RETURN     BGFY /* This is a fairly unusual code. Please note the logic.  1. Inner Calculate does 2 things:    a.  filter down the BG Matrix only for CM1 data    b. Ensure all months are SUMMED up using ALL for DT_Date[Month_Name]to override the month slicer selection using DT_Date[Month_Name] in report   2. Outer Calculate uses ALL in DT_Date[Month_Number] to ensure data for all months are displayed in OUTPUT  3. This means 2 ALL code snippets are needed, just one will not do. 4. IMPORTANT: Inner ALL must use Month_Name to override slicer selection Outer ALL cannot use Month_Name, else full year data not shown in Output. It must use a different field than Month_Name, hence Month_Number is used as they are essentially the same thing */	Matrix_1_BG; Ebit_0_BG	Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; CM1_effect_0_BG_YTD; Volume_effect_0_BGFY; Volume_effect_1_BG_YTD; CM1/kg_0_BGFY_VarCostCalc; CM1/kg_0_BGFY_VolumeCalc; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; VarCost_effect_0_BGFY; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
CM1_effect_0_BG_YTD	 TOTALYTD ( [CM1_effect_0_BGFY], DT_Date[Date] )	CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG	Volume_effect_1_YTD(for BG comp.); VarCost_effect_YTD(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; Volume_effect_1_BG_YTD; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_0_BGFY	 VAR Sel =     SELECTEDVALUE ( DT_Date[Month_short] ) VAR BGFY =     CALCULATE (         [Matrix_1_BG],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" ),         ALL ( DT_Date[Month_short] )     ) RETURN     BGFY //For explanation of logic, see [CM1_effect_0_BGFY]	Matrix_1_BG; Ebit_0_BG	Volume_effect_1_FYFC(for BG comp.); Volume_effect_1_YTD(for BG comp.); Price_effect_1_FYFC(for BG comp.); Price_effect_1_YTD(for BG comp.); VarCost_effect_FYFC(for BG comp.); VarCost_effect_YTD(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; Volume_effect_0_BGFY; Volume_0_BG_YTD; Volume_effect_1_BG_YTD; CM1/kg_0_BGFY_VarCostCalc; CM1/kg_0_BGFY_VolumeCalc; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; Price_effect_1_BGFY; Price_effect_1_BG_YTD; VarCost_effect_0_BGFY; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
Volume_effect_0_BGFY	[Volume_0_BGFY] * [CM1/kg_0_BGFY_VolumeCalc]	Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG; CM1/kg_0_BGFY_VolumeCalc; CM1_effect_0_BGFY	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
Volume_0_BG_YTD	 TOTALYTD ( [Volume_0_BGFY], DT_Date[Date] )	Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG	Volume_effect_1_YTD(for BG comp.); Price_effect_1_YTD(for BG comp.); VarCost_effect_YTD(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; Volume_effect_1_BG_YTD; CM1/kg_0_BG_YTD_VolumeCalc; CM1/kg_0_BG_YTD_VarCostCalc; Price_effect_1_BG_YTD; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_effect_1_BG_YTD	[Volume_0_BG_YTD] * [CM1/kg_0_BG_YTD_VolumeCalc]	Volume_0_BG_YTD; Volume_0_BGFY; Matrix_1_BG; Ebit_0_BG; CM1/kg_0_BG_YTD_VolumeCalc; CM1_effect_0_BG_YTD; CM1_effect_0_BGFY	Delta_2_YTD_BG_SBU; BGYTD_0	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
CM1/kg_0_BGFY_VarCostCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",     CALCULATE (         DIVIDE ( [CM1_effect_0_BGFY], [Volume_0_BGFY] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. CM1/kg FYFC PM = CM1 effect FYFC PM / Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, CM1 and Volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to divide: CM1 / Volume, we get a blank, as CM1 and volume are on different lines.  4. The CALCULATE code snippet helps us to divide them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Variable cost'.  Why??  Because we use CM1/kg to calculate Variable cost effect  later.   6. Hence IF - Selectedvalue used. Now, we get an output only for 'Variable cost'.  */	CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY	VarCost_effect_FYFC(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); VarCost_effect_0_BGFY	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
CM1/kg_0_BGFY_VolumeCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Volume",     CALCULATE (         DIVIDE ( [CM1_effect_0_BGFY], [Volume_0_BGFY] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. CM1/kg FYFC PM = CM1 effect FYFC PM / Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, CM1 and Volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to divide: CM1 / Volume, we get a blank, as CM1 and volume are on different lines.  4. The CALCULATE code snippet helps us to divide them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Variable cost'.  Why??  Because we use CM1/kg to calculate Variable cost effect  later.   6. Hence IF - Selectedvalue used. Now, we get an output only for 'Variable cost'.  */	CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY	Volume_effect_1_FYFC(for BG comp.); FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; FYFC_1(for BG comp.); Volume_effect_0_BGFY	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
CM1/kg_0_BG_YTD_VolumeCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Volume",     CALCULATE (         DIVIDE ( [CM1_effect_0_BG_YTD], [Volume_0_BG_YTD] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY	Volume_effect_1_YTD(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; Volume_effect_1_BG_YTD	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Date[Date]
CM1/kg_0_BG_YTD_VarCostCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",     CALCULATE (         DIVIDE ( [CM1_effect_0_BG_YTD], [Volume_0_BG_YTD] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY	VarCost_effect_YTD(for BG comp.); Delta_2_YTD_BG_SBU; Act_YTD_1(for BG comp.); BGYTD_0; VarCost_effect_0_BG_YTD	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Date[Date]
FixedCost_effect_0_BGFY	 VAR Sel =     SELECTEDVALUE ( DT_Date[Month_short] ) VAR BGFY =     CALCULATE (         [Matrix_1_BG],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost" ),         ALL ( DT_Date[Month_short] )     ) RETURN     BGFY //For explanation of logic, see [CM1_effect_0_BGFY]	Matrix_1_BG; Ebit_0_BG	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; Delta_2_YTD_BG_SBU; BGYTD_0; FixedCost_effect_1_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
FixedCost_effect_1_BG_YTD	 TOTALYTD ( [FixedCost_effect_0_BGFY], DT_Date[Date] )	FixedCost_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG	Delta_2_YTD_BG_SBU; BGYTD_0	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
EBITbSI_effect_0_BGFY	 VAR Sel =     SELECTEDVALUE ( DT_Date[Month_short] ) VAR BGFY =     CALCULATE (         [Matrix_1_BG],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "EBITbSI" ),         ALL ( DT_Date[Month_short] )     ) RETURN     BGFY	Matrix_1_BG; Ebit_0_BG	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; Delta_2_YTD_BG_SBU; BGYTD_0; EBITbSI_effect_1_BG_YTD; EBITbSI_effect_0_BGFY_SBU	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
EBITbSI_effect_1_BG_YTD	 TOTALYTD ( [EBITbSI_effect_0_BGFY], DT_Date[Date] )	EBITbSI_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG	Delta_2_YTD_BG_SBU; BGYTD_0	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Price_0_BGFY	 VAR Sel =     SELECTEDVALUE ( DT_Date[Month_short] ) VAR BGFY =     CALCULATE (         [Matrix_1_BG],         KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Price" ),         ALL ( DT_Date[Month_short] )     ) RETURN     BGFY //For explanation of logic, see [CM1_effect_0_BGFY]	Matrix_1_BG; Ebit_0_BG	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU; Delta_2_YTD_BG_SBU; BGYTD_0; Price_effect_1_BGFY; Price_0_BG_YTD; Price_effect_1_BG_YTD; VarCost_effect_0_BGFY; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
Price_effect_1_BGFY	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_0_BGFY] * [Volume_0_BGFY],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) ) /*   1. Price effect FYFC PM = Price FYFC PM * Volume FYFC PM.  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Because, in the KPI list, Price and volume are 2 different KPIs.  When we make a visual (e.g. a Table), and put KPI column in it, then try to multiply: Price * Volume, we get a blank, as price and volume are on different lines.  4. The CALCULATE code snippet helps us to multiply them.  5. But we still have an issue. For the Calculate code, we get an output (same number, by the way) for each KPI. We only want an output for 'Price'.  6. Hence IF - Selectedvalue used. Now, we get an output only for 'Price'.  */	Price_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]
Price_0_BG_YTD	 TOTALYTD ( [Price_0_BGFY], DT_Date[Date] )	Price_0_BGFY; Matrix_1_BG; Ebit_0_BG	Delta_2_YTD_BG_SBU; BGYTD_0; Price_effect_1_BG_YTD; VarCost_effect_0_BG_YTD	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Price_effect_1_BG_YTD	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_0_BG_YTD] * [Volume_0_BG_YTD],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	Price_0_BG_YTD; Price_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY	Delta_2_YTD_BG_SBU; BGYTD_0	DT_Matrix_Act_Table_ND; DT_Date; FT_Budget_EPME	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Date[Date]
VarCost_effect_0_BGFY	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_0_BGFY], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeinVarCost =     CALCULATE ( [Volume_0_BGFY], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR VolumeEffect = VolumeinVarCost * [CM1/kg_0_BGFY_VarCostCalc] //Price effect VAR PriceEffect =     CALCULATE (         [Price_0_BGFY] * VolumeinVarCost,         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output /*   1. Var Cost effect = CM1 effect - Volume effect - Price effect  2. So, the formula is actually super simple. Then why have we written the complex code above?  3. Ans: In KPI table, CM1, Volume, Price and Var cost are unique items. When I build a table visual with KPI column and them put the CM1 effect, Volume effect, Price effect too, each is in a separate line.  For them to be in 1 line (Var cost), I need to write above code.  4. Most important: The code for Volume Effect merits a detailed explanation.  Volume effect = volume * CM1/kg Let us look at the predicate of the equation above (i.e. what is after =)    Volume:    Originally, Volume is found against 'Volume' KPI.    We want it to show up for 'Variable cost'. We get via the variable "VolumeinVarCost"     CM1/kg:     In the [CM1/kg_FYFC_3_PM_VarCostCalc], we have coded the numbers to show up for Variable cost    (FYI: [CM1/kg_FYFC_3_PM_VolumeCalc] is also available, its not used here, but for Volume calculations)     Now both Volume and CM1/kg are available in the line for KPI 'Variable Cost'.     In Variable 'VolumeEffect' we now multiply Volume * CM1/kg    */	CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BGFY; CM1/kg_0_BGFY_VarCostCalc; Price_0_BGFY	FYBG_0; Delta_1_BGFY; Delta_2_BGFY_SBU	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]
VarCost_effect_0_BG_YTD	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_0_BG_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeinVarCost =     CALCULATE ( [Volume_0_BG_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) VAR VolumeEffect = VolumeinVarCost * [CM1/kg_0_BG_YTD_VarCostCalc] //Price effect VAR PriceEffect =     CALCULATE (         [Price_0_BG_YTD] * VolumeinVarCost,         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output	CM1_effect_0_BG_YTD; CM1_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG; Volume_0_BG_YTD; Volume_0_BGFY; CM1/kg_0_BG_YTD_VarCostCalc; Price_0_BG_YTD; Price_0_BGFY	Delta_2_YTD_BG_SBU; BGYTD_0	DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
CM1_effect_0_PYTD	 CALCULATE ( [CM1_effect_1_YTD], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act	Volume_effect_1_YTD(for PY comp.); VarCost_effect_YTD(for PY comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Volume_effect_1_PYTD; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; VarCost_effect_PYTD	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
CM1_effect_0_PYFY	 CALCULATE (     [Matrix_0_Act],     KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "CM1" ),     PREVIOUSYEAR ( DT_Date[Date] ) )	Matrix_0_Act; Maris_0_Act	Volume_effect_1_FYFC(for PY comp.); Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; Volume_effect_1_PYFY; CM1/kg_PYFY_VolumeCalc; CM1/kg_PYFY_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_effect_1_PYFY_for_minus_CM1_operation	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
FixedCost_effect_0_PYTD	 CALCULATE ( [FixedCost_effect_2_YTD], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	FixedCost_effect_2_YTD; Matrix_0_Act; Maris_0_Act	PYTD_0; Delta_1_PYTD_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
FixedCost_effect_0_PYFY	 CALCULATE (     [Matrix_0_Act],     KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Fixed Cost" ),     PREVIOUSYEAR ( DT_Date[Date] ) ) 	Matrix_0_Act; Maris_0_Act	PYFY_0; Delta_1_PYFY_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Price_0_PYTD	 CALCULATE ( [Price_0_YTD], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	Price_0_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD	PYTD_0; Delta_1_PYTD_SBU; Price_effect_1_PYTD; VarCost_effect_PYTD	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_Number]
Price_effect_1_PYTD	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Price",     CALCULATE (         [Price_0_PYTD] * [Volume_0_PYTD],         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	Price_0_PYTD; Price_0_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_YTD; Volume_0_PYTD	PYTD_0; Delta_1_PYTD_SBU	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_Number]
Volume_0_PYTD	 CALCULATE ( [Volume_0_YTD], SAMEPERIODLASTYEAR ( DT_Date[Date] ) )	Volume_0_YTD; Matrix_0_Act; Maris_0_Act	Volume_effect_1_YTD(for PY comp.); Price_effect_1_YTD(for PY comp.); VarCost_effect_YTD(for PY comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Price_effect_1_PYTD; Volume_effect_1_PYTD; CM1/kg_PYTD_VarCostCalc; CM1/kg_PYTD_VolumeCalc; VarCost_effect_PYTD	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_effect_1_PYTD	[Volume_0_PYTD] * [CM1/kg_PYTD_VolumeCalc]	Volume_0_PYTD; Volume_0_YTD; Matrix_0_Act; Maris_0_Act; CM1/kg_PYTD_VolumeCalc; CM1_effect_0_PYTD; CM1_effect_1_YTD	PYTD_0; Delta_1_PYTD_SBU	DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND	DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_0_PYFY	 CALCULATE (     [Matrix_0_Act],     KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" ),     PREVIOUSYEAR ( DT_Date[Date] ) ) 	Matrix_0_Act; Maris_0_Act	Volume_effect_1_FYFC(for PY comp.); Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; Volume_effect_1_PYFY; CM1/kg_PYFY_VolumeCalc; CM1/kg_PYFY_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_0_PYFY_for_minus_CM1_operation(for PY comp.); Volume_effect_1_PYFY_for_minus_CM1_operation	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
Volume_effect_1_PYFY	 [Volume_0_PYFY] * [CM1/kg_PYFY_VolumeCalc]	Volume_0_PYFY; Matrix_0_Act; Maris_0_Act; CM1/kg_PYFY_VolumeCalc; CM1_effect_0_PYFY	PYFY_0; Delta_1_PYFY_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]
CM1/kg_PYTD_VarCostCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",     CALCULATE (         DIVIDE ( [CM1_effect_0_PYTD], [Volume_0_PYTD] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_PYTD; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_PYTD; Volume_0_YTD	VarCost_effect_YTD(for PY comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; VarCost_effect_PYTD	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_Number]
CM1/kg_PYTD_VolumeCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Volume",     CALCULATE (         DIVIDE ( [CM1_effect_0_PYTD], [Volume_0_PYTD] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_PYTD; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_PYTD; Volume_0_YTD	Volume_effect_1_YTD(for PY comp.); Act_YTD_0(for PY comp.); PYTD_0; Delta_1_PYTD_SBU; Volume_effect_1_PYTD	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Month_Number]
CM1/kg_PYFY_VolumeCalc	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Volume",     CALCULATE (         DIVIDE ( [CM1_effect_0_PYFY], [Volume_0_PYFY] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_PYFY; Matrix_0_Act; Maris_0_Act; Volume_0_PYFY	Volume_effect_1_FYFC(for PY comp.); Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; Volume_effect_1_PYFY	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
VarCost_effect_PYTD	 //CM1 effect VAR CM1Effect =     CALCULATE ( [CM1_effect_0_PYTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) //Volume effect VAR VolumeEffect =     CALCULATE ( [Volume_0_PYTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) * [CM1/kg_PYTD_VarCostCalc] //Price effect VAR PriceEffect =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CALCULATE (             [Price_0_PYTD] * [Volume_0_PYTD],             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     ) // Output VAR Output =     IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "Variable Cost",         CM1Effect - VolumeEffect - PriceEffect     ) RETURN     Output	CM1_effect_0_PYTD; CM1_effect_1_YTD; Matrix_0_Act; Maris_0_Act; Volume_0_PYTD; Volume_0_YTD; CM1/kg_PYTD_VarCostCalc; Price_0_PYTD; Price_0_YTD	PYTD_0; Delta_1_PYTD_SBU	FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Matrix_Act_Table_ND; DT_Date	FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Matrix_Act_Table_ND[KPI]; DT_Date[Date]; DT_Date[Month_Number]
EBITbSI_effect_0_BGFY_SBU	 SWITCH (     MAX ( SBU_Keys_disconected[ID] ),     7, CALCULATE ( SUMX ( DT_SBU, [EBITbSI_effect_0_BGFY] ), ALL ( DT_SBU ) ),     CALCULATE (         [EBITbSI_effect_0_BGFY],         FILTER (             DT_SBU,             DT_SBU[SBU_KEY] = SELECTEDVALUE ( SBU_Keys_disconected[SBU_Key] )         )     ) ) 	EBITbSI_effect_0_BGFY; Matrix_1_BG; Ebit_0_BG		SBU_Keys_disconected; DT_SBU; DT_Date; FT_Budget_EPME; DT_Matrix_Act_Table_ND	SBU_Keys_disconected[ID]; DT_Date[Month_short]; FT_Budget_EPME[Value]; FT_Budget_EPME[KPI]; DT_Matrix_Act_Table_ND[KPI]; DT_SBU[SBU_KEY]; SBU_Keys_disconected[SBU_Key]
Ebit_0_FC	 CALCULATE (     SUM ( Historical[Value] ) / 1000,     KEEPFILTERS ( Historical[LatestInput_ND] = 1 ) )		0_TEST; 2_TEST; TEST; Matrix_1_FC; Volume_FYFC_0_PM; Volume_effect_FYFC_1_PM; CM1_effect_FYFC_0_PM; CM1/kg_FYFC_0_PM_VolumeCalc; CM1/kg_FYFC_0_PM_VarCostCalc; FixedCost_effect_FYFC_1_PM; Price_FYFC_0_PM; Price_effect_FYFC_1_PM; VarCost_effect_FYFC_0_PM; FixedCost_effect_FYFC_0_CM; Volume_FYFC_0_CM; Volume_effect_FYFC_1_CM(for PM comp.); Price_FYFC_0_CM; Price_effect_FYFC_1_CM(for PM comp.); CM1_effect_FYFC_0_CM; VarCost_effect_FYFC_0_CM(for PM comp.); EBITbSI_effect_FYFC_0_CM; EBITbSI_effect_FYFC_1_CM_SBU; FYFC_CM_0_(for PM comp.); FYFC_0_PM; Delta_FYFC_2_CM_PM_month_SBU	Historical	Historical[Value]; Historical[LatestInput_ND]; Historical[Forecast Month]; Historical[Input Date]
CM1/kg_PYFY_for_minus_CM1_operation	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "CM1",     CALCULATE (         DIVIDE ( [CM1_effect_0_PYFY], [Volume_0_PYFY] ),         ALL ( DT_Matrix_Act_Table_ND[KPI] )     ) )	CM1_effect_0_PYFY; Matrix_0_Act; Maris_0_Act; Volume_0_PYFY	Act_FYFC_0(for PY comp.); PYFY_0; Delta_1_PYFY_SBU; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.); Volume_effect_1_PYFY_for_minus_CM1_operation	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Volume_0_YTD_for_minus_CM1_operation(for PY comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "CM1",     CALCULATE ( [Volume_0_YTD], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) )	Volume_0_YTD; Matrix_0_Act; Maris_0_Act	Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; Volume_0_FYFC_for_minus_CM1_operation; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Volume_0_FYFC_for_minus_CM1_operation	 [Volume_0_YTD_for_minus_CM1_operation(for PY comp.)]     + IF (         SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "CM1",         CALCULATE (             CALCULATE (                 [Matrix_1_FC_Current],                 KEEPFILTERS ( DT_Matrix_Act_Table_ND[KPI] = "Volume" )             ),             ALL ( DT_Matrix_Act_Table_ND[KPI] )         )     )	Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current	Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU; Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
Volume_effect_1_FYFC_for_minus_CM1_operation(for PY comp.)	[Volume_0_FYFC_for_minus_CM1_operation] * [CM1/kg_PYFY_for_minus_CM1_operation]	Volume_0_FYFC_for_minus_CM1_operation; Volume_0_YTD_for_minus_CM1_operation(for PY comp.); Volume_0_YTD; Matrix_0_Act; Maris_0_Act; Matrix_1_FC_Current; EBITbSI_0_FC_Current; CM1/kg_PYFY_for_minus_CM1_operation; CM1_effect_0_PYFY; Volume_0_PYFY	Act_FYFC_0(for PY comp.); Delta_1_PYFY_SBU	DT_Matrix_Act_Table_ND; DT_Date; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; Historical	DT_Matrix_Act_Table_ND[KPI]; DT_Date[Month_Number]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]; DT_Date[Year]; Historical[Value]; Historical[check]; Historical[Input Date]; Historical[Forecast Month]; Historical[Input_Date_for_CM]; Historical[KPI]
Volume_0_PYFY_for_minus_CM1_operation(for PY comp.)	 IF (     SELECTEDVALUE ( DT_Matrix_Act_Table_ND[KPI] ) = "CM1",     CALCULATE ( [Volume_0_PYFY], ALL ( DT_Matrix_Act_Table_ND[KPI] ) ) )	Volume_0_PYFY; Matrix_0_Act; Maris_0_Act	PYFY_0; Delta_1_PYFY_SBU; Volume_effect_1_PYFY_for_minus_CM1_operation	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
Volume_effect_1_PYFY_for_minus_CM1_operation	 [Volume_0_PYFY_for_minus_CM1_operation(for PY comp.)] * [CM1/kg_PYFY_for_minus_CM1_operation]	Volume_0_PYFY_for_minus_CM1_operation(for PY comp.); Volume_0_PYFY; Matrix_0_Act; Maris_0_Act; CM1/kg_PYFY_for_minus_CM1_operation; CM1_effect_0_PYFY	PYFY_0; Delta_1_PYFY_SBU	DT_Matrix_Act_Table_ND; FT_MARIS_VW; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched; DT_Date	DT_Matrix_Act_Table_ND[KPI]; FT_MARIS_VW[VALUE_EUR]; FT_OCEAN_SalesAnalysis_Union_BASF_Enriched[STANDARD_QUANTITY_KG]; FT_MARIS_VW[ITEM]; FT_MARIS_VW[ITEM_KEY]; DT_Date[Date]
FilterDates	 COUNTROWS ( FT_MARIS_VW )			FT_MARIS_VW	
Filter Disc	 COUNTROWS ( FT_COINS_S27E_PM )			FT_COINS_S27E_PM	